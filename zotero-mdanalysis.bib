
@software{krekel_pytest-devpytest_2004,
	title = {pytest-dev/pytest},
	rights = {{MIT}},
	url = {https://github.com/pytest-dev/pytest},
	publisher = {pytest-dev},
	author = {Krekel, H. and Oliveira, B. and Pfannschmidt, R. and Bruynooghe, F. and Laugher, B. and Bruhin, F.},
	urldate = {2022-08-04},
	date = {2004},
	keywords = {hacktoberfest, python, test, testing, unit-testing},
}

@online{noauthor_submitting_2018,
	title = {Submitting a paper to {JOSS}},
	url = {https://joss.readthedocs.io/en/latest/submitting.html},
	urldate = {2022-08-03},
	date = {2018},
}

@online{github_inc_github_2022,
	title = {{GitHub} Terms of Service},
	url = {https://docs.github.com/en/site-policy/github-terms/github-terms-of-service},
	abstract = {Get started, troubleshoot, and make the most of {GitHub}. Documentation for new users, developers, administrators, and all of {GitHub}'s products.},
	titleaddon = {{GitHub} Docs},
	author = {{GitHub, Inc}},
	urldate = {2022-08-04},
	date = {2022},
	langid = {english},
}

@online{github_inc_github_2022-1,
	title = {{GitHub} Actions},
	url = {https://github.com/features/actions},
	abstract = {Easily build, package, release, update, and deploy your project in any language—on {GitHub} or any external system—without having to run code yourself.},
	titleaddon = {{GitHub}},
	author = {{GitHub, Inc}},
	urldate = {2022-08-04},
	date = {2022},
	langid = {english},
}

@online{read_the_docs_inc_read_2022,
	title = {Read the Docs},
	url = {https://readthedocs.org/},
	author = {{Read the Docs, Inc}},
	urldate = {2022-08-04},
	date = {2022},
}

@online{codecov_llc_codecov_2022,
	title = {Codecov},
	url = {https://about.codecov.io/},
	abstract = {Codecov is the leading, dedicated code coverage solution. Try Codecov for free now to help your developers find untested code and deploy changes with confidence.},
	titleaddon = {Codecov - The Leading Code Coverage Solution},
	author = {{Codecov LLC}},
	urldate = {2022-08-04},
	date = {2022},
	langid = {american},
}

@online{atlassian_bitbucket_2022,
	title = {Bitbucket},
	url = {https://bitbucket.org/product},
	abstract = {Bitbucket Cloud is a Git-based code and {CI}/{CD} tool optimized for teams using Jira.},
	titleaddon = {Bitbucket},
	author = {Atlassian},
	urldate = {2022-08-04},
	date = {2022},
	langid = {english},
}

@online{gitlab_inc_gitlab_2022,
	title = {{GitLab}},
	url = {https://about.gitlab.com/},
	abstract = {From planning to production, bring teams together in one application. Ship secure code faster, deploy to any cloud, and drive business results.},
	titleaddon = {About {GitLab}},
	author = {{GitLab Inc.}},
	urldate = {2022-08-04},
	date = {2022},
	langid = {english},
}

@online{github_inc_github_2022-2,
	title = {{GitHub}},
	url = {https://github.com},
	abstract = {{GitHub} is where people build software. More than 83 million people use {GitHub} to discover, fork, and contribute to over 200 million projects.},
	titleaddon = {{GitHub}},
	author = {{GitHub}, Inc},
	urldate = {2022-08-04},
	date = {2022},
	langid = {english},
}

@article{conda-forge_community_conda-forge_2015,
	title = {The conda-forge Project: Community-based Software Distribution Built on the conda Package Format and Ecosystem},
	rights = {Creative Commons Attribution 3.0 United States, Open Access},
	url = {https://zenodo.org/record/4774216},
	doi = {10.5281/ZENODO.4774216},
	shorttitle = {The conda-forge Project},
	abstract = {conda-forge is a community-led project that develops centralized build infrastructure and software packages for the conda package format and ecosystem. If you'd like to credit the conda-forge project in your work, please cite this entry. See www.conda-forge.org for more details.},
	author = {Conda-Forge Community},
	urldate = {2022-08-04},
	date = {2015-07-12},
	note = {Publisher: Zenodo},
}

@online{noauthor_pypi_nodate,
	title = {{PyPI} · The Python Package Index},
	url = {https://pypi.org/},
	abstract = {The Python Package Index ({PyPI}) is a repository of software for the Python programming language.},
	titleaddon = {{PyPI}},
	urldate = {2022-08-04},
	langid = {english},
}

@online{noauthor_poetry_nodate,
	title = {Poetry - Python dependency management and packaging made easy},
	url = {https://python-poetry.org/},
	urldate = {2022-08-04},
}

@software{noauthor_pypasetuptools_2022,
	title = {pypa/setuptools},
	rights = {{MIT}},
	url = {https://github.com/pypa/setuptools},
	abstract = {Official project repository for the Setuptools build system},
	publisher = {Python Packaging Authority},
	urldate = {2022-08-04},
	date = {2022-08-03},
	note = {original-date: 2016-03-29T14:02:33Z},
}

@online{noauthor_pep_nodate,
	title = {{PEP} 257 – Docstring Conventions {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0257/},
	urldate = {2022-08-04},
}

@online{noauthor_git_nodate,
	title = {Git},
	url = {https://git-scm.com/},
	urldate = {2022-08-04},
}

@online{noauthor_pep_nodate-1,
	title = {{PEP} 440 – Version Identification and Dependency Specification {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0440/},
	urldate = {2022-08-04},
}

@online{preston-werner_semantic_nodate,
	title = {Semantic Versioning 2.0.0},
	url = {https://semver.org/},
	abstract = {Semantic Versioning spec and website},
	titleaddon = {Semantic Versioning},
	author = {Preston-Werner, Tom},
	urldate = {2022-08-04},
	langid = {english},
}

@online{noauthor_gnu_nodate,
	title = {{GNU} General Public License v2.0 - {GNU} Project - Free Software Foundation},
	url = {https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html},
	urldate = {2022-08-04},
}

@software{loche_maicos_2022,
	title = {{MAICoS}},
	url = {https://gitlab.com/maicos-devel/maicos},
	abstract = {{MAICoS} is the acronym for Molecular Analysis for Interfacial
and Confined Systems. It is an object-oriented python toolkit for
analysing the structure and dynamics of interfacial and confined
fluids from molecular simulations. Combined with {MDAnalysis},
{MAICoS} can be used to extract density profiles, dielectric constants,
structure factors, or transport properties from trajectories files,
including {LAMMPS}, {GROMACS}, {CHARMM} or {NAMD} data. {MAICoS} is open source
and is released under the {GNU} general public license v3.0.},
	author = {Loche, Philip and Jaeger, Henrik and Schlaich, Alexander and Becker, Maximilian and Gravelle, Simon and Stärk, Philipp and Velpuri, Srihas},
	urldate = {2022-08-04},
	date = {2022-02-21},
}

@article{araya-secchi_characterization_2014,
	title = {Characterization of a Novel Water Pocket Inside the Human Cx26 Hemichannel Structure},
	volume = {107},
	issn = {0006-3495},
	url = {https://www.sciencedirect.com/science/article/pii/S0006349514006018},
	doi = {10.1016/j.bpj.2014.05.037},
	abstract = {Connexins (Cxs) are a family of vertebrate proteins constituents of gap junction channels ({GJCs}) that connect the cytoplasm of adjacent cells by the end-to-end docking of two Cx hemichannels. The intercellular transfer through {GJCs} occurs by passive diffusion allowing the exchange of water, ions, and small molecules. Despite the broad interest to understand, at the molecular level, the functional state of Cx-based channels, there are still many unanswered questions regarding structure-function relationships, perm-selectivity, and gating mechanisms. In particular, the ordering, structure, and dynamics of water inside Cx {GJCs} and hemichannels remains largely unexplored. In this work, we describe the identification and characterization of a believed novel water pocket—termed the {IC} pocket—located in-between the four transmembrane helices of each human Cx26 ({hCx}26) monomer at the intracellular ({IC}) side. Using molecular dynamics ({MD}) simulations to characterize {hCx}26 internal water structure and dynamics, six {IC} pockets were identified per hemichannel. A detailed characterization of the dynamics and ordering of water including conformational variability of residues forming the {IC} pockets, together with multiple sequence alignments, allowed us to propose a functional role for this cavity. An in vitro assessment of tracer uptake suggests that the {IC} pocket residue Arg-143 plays an essential role on the modulation of the {hCx}26 hemichannel permeability.},
	pages = {599--612},
	number = {3},
	journaltitle = {Biophysical Journal},
	shortjournal = {Biophysical Journal},
	author = {Araya-Secchi, Raul and Perez-Acle, Tomas and Kang, Seung-gu and Huynh, Tien and Bernardin, Alejandro and Escalona, Yerko and Garate, Jose-Antonio and Martínez, Agustin D. and García, Isaac E. and Sáez, Juan C. and Zhou, Ruhong},
	urldate = {2022-08-04},
	date = {2014-08-05},
	langid = {english},
}

@software{wang_cookiecutter_nodate,
	title = {Cookiecutter for {MDAnalysis}-based packages},
	url = {https://github.com/MDAnalysis/cookiecutter-mdakit},
	abstract = {A cookiecutter template for those interested in developing packages based on {MDAnalysis}. Skeletal starting repositories can be created from this template to create the file structure semi-autonomously so you can focus on what's important: the science!

The skeletal structure is designed to help you get started, but do not feel limited by the skeleton's features included here. Just to name a few things you can alter to suit your needs: change continuous integration options, remove deployment platforms, or test with a different suite.},
	publisher = {{MDAnalysis}},
	author = {Wang, Lily and Alibay, Irfan and Naughton, Fiona},
	urldate = {2022-07-29},
}

@online{noauthor_aiida_nodate,
	title = {{AiiDA} plugin registry},
	url = {https://aiidateam.github.io/aiida-registry/},
	abstract = {The Journal of Open Source Software is a developer friendly, open access journal for research software packages.},
}

@online{noauthor_journal_nodate,
	title = {Journal of Open Source Software},
	url = {https://joss.theoj.org},
	abstract = {The Journal of Open Source Software is a developer friendly, open access journal for research software packages.},
}

@online{noauthor_scopus_nodate,
	title = {Scopus},
	url = {https://www.scopus.com/},
}

@software{halchenko_duecreditduecredit_2021,
	title = {duecredit/duecredit: 0.9.1},
	url = {https://zenodo.org/record/4685131},
	shorttitle = {duecredit/duecredit},
	abstract = {🐛 Bug Fix Set up intuit auto to automate releases \#178 (@jwodder @yarikoptic) {BF}: make pypi upload happen in py 3.8 matrix (2.7 was removed) \#178 (@yarikoptic) Authors: 2 John T. Wodder {II} (@jwodder) Yaroslav Halchenko (@yarikoptic)},
	publisher = {Zenodo},
	author = {Halchenko, Yaroslav O. and Visconti di Oleggio Castello, Matteo and Hanke, Michael and Gors, Jason and Szczepanik, Michał and Barnes, Chris and Irvine, Emily and Raamana, Pradeep Reddy and Markiewicz, Christopher J. and Wilk, Jakub and Volgyes, David and Leinweber, Katrin and Estève, Loïc and Beckstein, Oliver and Gulban, Omer Faruk},
	urldate = {2022-08-03},
	date = {2021-04-13},
	doi = {10.5281/zenodo.4685131},
	keywords = {citation tracking, software citation},
}

@article{bonomi_promoting_2019,
	title = {Promoting transparency and reproducibility in enhanced molecular simulations},
	volume = {16},
	rights = {2019 Springer Nature America, Inc.},
	issn = {1548-7105},
	url = {https://www.nature.com/articles/s41592-019-0506-8},
	doi = {10.1038/s41592-019-0506-8},
	abstract = {The {PLUMED} consortium unifies developers and contributors to {PLUMED}, an open-source library for enhanced-sampling, free-energy calculations and the analysis of molecular dynamics simulations. Here, we outline our efforts to promote transparency and reproducibility by disseminating protocols for enhanced-sampling molecular simulations.},
	pages = {670--673},
	number = {8},
	journaltitle = {Nature Methods},
	shortjournal = {Nat Methods},
	author = {Bonomi, Massimiliano and Bussi, Giovanni and Camilloni, Carlo and Tribello, Gareth A. and Banáš, Pavel and Barducci, Alessandro and Bernetti, Mattia and Bolhuis, Peter G. and Bottaro, Sandro and Branduardi, Davide and Capelli, Riccardo and Carloni, Paolo and Ceriotti, Michele and Cesari, Andrea and Chen, Haochuan and Chen, Wei and Colizzi, Francesco and De, Sandip and De La Pierre, Marco and Donadio, Davide and Drobot, Viktor and Ensing, Bernd and Ferguson, Andrew L. and Filizola, Marta and Fraser, James S. and Fu, Haohao and Gasparotto, Piero and Gervasio, Francesco Luigi and Giberti, Federico and Gil-Ley, Alejandro and Giorgino, Toni and Heller, Gabriella T. and Hocky, Glen M. and Iannuzzi, Marcella and Invernizzi, Michele and Jelfs, Kim E. and Jussupow, Alexander and Kirilin, Evgeny and Laio, Alessandro and Limongelli, Vittorio and Lindorff-Larsen, Kresten and Löhr, Thomas and Marinelli, Fabrizio and Martin-Samos, Layla and Masetti, Matteo and Meyer, Ralf and Michaelides, Angelos and Molteni, Carla and Morishita, Tetsuya and Nava, Marco and Paissoni, Cristina and Papaleo, Elena and Parrinello, Michele and Pfaendtner, Jim and Piaggi, Pablo and Piccini, GiovanniMaria and Pietropaolo, Adriana and Pietrucci, Fabio and Pipolo, Silvio and Provasi, Davide and Quigley, David and Raiteri, Paolo and Raniolo, Stefano and Rydzewski, Jakub and Salvalaglio, Matteo and Sosso, Gabriele Cesare and Spiwok, Vojtěch and Šponer, Jiří and Swenson, David W. H. and Tiwary, Pratyush and Valsson, Omar and Vendruscolo, Michele and Voth, Gregory A. and White, Andrew and {The PLUMED consortium}},
	urldate = {2022-08-03},
	date = {2019-08},
	langid = {english},
	note = {Number: 8
Publisher: Nature Publishing Group},
	keywords = {Culture, Software},
}

@article{abraham_gromacs_2015,
	title = {{GROMACS}: High performance molecular simulations through multi-level parallelism from laptops to supercomputers},
	volume = {1-2},
	issn = {2352-7110},
	url = {https://www.sciencedirect.com/science/article/pii/S2352711015000059},
	doi = {10.1016/j.softx.2015.06.001},
	shorttitle = {{GROMACS}},
	abstract = {{GROMACS} is one of the most widely used open-source and free software codes in chemistry, used primarily for dynamical simulations of biomolecules. It provides a rich set of calculation types, preparation and analysis tools. Several advanced techniques for free-energy calculations are supported. In version 5, it reaches new performance heights, through several new and enhanced parallelization algorithms. These work on every level; {SIMD} registers inside cores, multithreading, heterogeneous {CPU}–{GPU} acceleration, state-of-the-art 3D domain decomposition, and ensemble-level parallelization through built-in replica exchange and the separate Copernicus framework. The latest best-in-class compressed trajectory storage format is supported.},
	pages = {19--25},
	journaltitle = {{SoftwareX}},
	shortjournal = {{SoftwareX}},
	author = {Abraham, Mark James and Murtola, Teemu and Schulz, Roland and Páll, Szilárd and Smith, Jeremy C. and Hess, Berk and Lindahl, Erik},
	urldate = {2022-08-03},
	date = {2015-09-01},
	langid = {english},
	keywords = {Free energy, {GPU}, Molecular dynamics, {SIMD}},
}

@article{roe_ptraj_2013,
	title = {{PTRAJ} and {CPPTRAJ}: Software for Processing and Analysis of Molecular Dynamics Trajectory Data},
	volume = {9},
	issn = {1549-9618},
	url = {https://doi.org/10.1021/ct400341p},
	doi = {10.1021/ct400341p},
	shorttitle = {{PTRAJ} and {CPPTRAJ}},
	abstract = {We describe {PTRAJ} and its successor {CPPTRAJ}, two complementary, portable, and freely available computer programs for the analysis and processing of time series of three-dimensional atomic positions (i.e., coordinate trajectories) and the data therein derived. Common tools include the ability to manipulate the data to convert among trajectory formats, process groups of trajectories generated with ensemble methods (e.g., replica exchange molecular dynamics), image with periodic boundary conditions, create average structures, strip subsets of the system, and perform calculations such as {RMS} fitting, measuring distances, B-factors, radii of gyration, radial distribution functions, and time correlations, among other actions and analyses. Both the {PTRAJ} and {CPPTRAJ} programs and source code are freely available under the {GNU} General Public License version 3 and are currently distributed within the {AmberTools} 12 suite of support programs that make up part of the Amber package of computer programs (see http://ambermd.org). This overview describes the general design, features, and history of these two programs, as well as algorithmic improvements and new features available in {CPPTRAJ}.},
	pages = {3084--3095},
	number = {7},
	journaltitle = {Journal of Chemical Theory and Computation},
	shortjournal = {J. Chem. Theory Comput.},
	author = {Roe, Daniel R. and Cheatham, Thomas E.},
	urldate = {2022-08-03},
	date = {2013-07-09},
	note = {Publisher: American Chemical Society},
}

@article{tiberti_encore_2015,
	title = {{ENCORE}: Software for Quantitative Ensemble Comparison},
	volume = {11},
	issn = {1553-7358},
	url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004415},
	doi = {10.1371/journal.pcbi.1004415},
	shorttitle = {{ENCORE}},
	abstract = {There is increasing evidence that protein dynamics and conformational changes can play an important role in modulating biological function. As a result, experimental and computational methods are being developed, often synergistically, to study the dynamical heterogeneity of a protein or other macromolecules in solution. Thus, methods such as molecular dynamics simulations or ensemble refinement approaches have provided conformational ensembles that can be used to understand protein function and biophysics. These developments have in turn created a need for algorithms and software that can be used to compare structural ensembles in the same way as the root-mean-square-deviation is often used to compare static structures. Although a few such approaches have been proposed, these can be difficult to implement efficiently, hindering a broader applications and further developments. Here, we present an easily accessible software toolkit, called {ENCORE}, which can be used to compare conformational ensembles generated either from simulations alone or synergistically with experiments. {ENCORE} implements three previously described methods for ensemble comparison, that each can be used to quantify the similarity between conformational ensembles by estimating the overlap between the probability distributions that underlie them. We demonstrate the kinds of insights that can be obtained by providing examples of three typical use-cases: comparing ensembles generated with different molecular force fields, assessing convergence in molecular simulations, and calculating differences and similarities in structural ensembles refined with various sources of experimental data. We also demonstrate efficient computational scaling for typical analyses, and robustness against both the size and sampling of the ensembles. {ENCORE} is freely available and extendable, integrates with the established {MDAnalysis} software package, reads ensemble data in many common formats, and can work with large trajectory files.},
	pages = {e1004415},
	number = {10},
	journaltitle = {{PLOS} Computational Biology},
	shortjournal = {{PLOS} Computational Biology},
	author = {Tiberti, Matteo and Papaleo, Elena and Bengtsen, Tone and Boomsma, Wouter and Lindorff-Larsen, Kresten},
	urldate = {2022-08-03},
	date = {2015-10-27},
	langid = {english},
	note = {Publisher: Public Library of Science},
	keywords = {Algorithms, Biochemical simulations, Biophysical simulations, Computer software, Molecular dynamics, Probability distribution, Protein structure, Protein structure comparison},
}

@software{gowers_kugupukugupu_2021,
	title = {kugupu/kugupu: v0.1.2},
	url = {https://zenodo.org/record/4545322},
	shorttitle = {kugupu/kugupu},
	abstract = {Beta release},
	publisher = {Zenodo},
	author = {Gowers, Richard and Matta, Micaela and Nguyen, Hai},
	urldate = {2022-08-03},
	date = {2021-02-17},
	doi = {10.5281/zenodo.4545322},
}

@article{smith_lipyphilic_2021,
	title = {{LiPyphilic}: A Python Toolkit for the Analysis of Lipid Membrane Simulations},
	volume = {17},
	issn = {1549-9618},
	url = {https://doi.org/10.1021/acs.jctc.1c00447},
	doi = {10.1021/acs.jctc.1c00447},
	shorttitle = {{LiPyphilic}},
	abstract = {Molecular dynamics simulations are now widely used to study emergent phenomena in lipid membranes with complex compositions. Here, we present {LiPyphilic}—a fast, fully tested, and easy-to-install Python package for analyzing such simulations. Analysis tools in {LiPyphilic} include the identification of cholesterol flip-flop events, the classification of local lipid environments, and the degree of interleaflet registration. {LiPyphilic} is both force field- and resolution-agnostic, and by using the powerful atom selection language of {MDAnalysis}, it can handle membranes with highly complex compositions. {LiPyphilic} also offers two on-the-fly trajectory transformations to (i) fix membranes split across periodic boundaries and (ii) perform nojump coordinate unwrapping. Our implementation of nojump unwrapping accounts for fluctuations in the box volume under the {NPT} ensemble—an issue that most current implementations have overlooked. The full documentation of {LiPyphilic}, including installation instructions and links to interactive online tutorials, is available at https://lipyphilic.readthedocs.io/en/latest.},
	pages = {5907--5919},
	number = {9},
	journaltitle = {Journal of Chemical Theory and Computation},
	shortjournal = {J. Chem. Theory Comput.},
	author = {Smith, Paul and Lorenz, Christian D.},
	urldate = {2022-08-03},
	date = {2021-09-14},
	note = {Publisher: American Chemical Society},
}

@article{wilson_investigating_2021,
	title = {Investigating the lipid fingerprint of {SLC}6 neurotransmitter transporters: a comparison of {dDAT}, {hDAT}, {hSERT}, and {GlyT}2},
	volume = {1},
	issn = {2667-1603},
	url = {https://www.sciencedirect.com/science/article/pii/S2667160321000090},
	doi = {10.1016/j.bbadva.2021.100010},
	shorttitle = {Investigating the lipid fingerprint of {SLC}6 neurotransmitter transporters},
	abstract = {The local lipid annulus, or “fingerprint”, of four {SLC}6 transporters ({dDAT}, {hDAT}, {hSERT}, and {GlyT}2) embedded in a complex neuronal membrane were compared and characterised using molecular dynamics. Our analysis included the development of new tools to improve membrane leaflet detection and the analysis of leaflet-dependent properties. Overall, the lipid fingerprints of the four transporters are comprised of similar lipids when grouped by headgroup or tail saturation. The enrichment and depletion of specific lipids, including sites of cholesterol contacts, varies between transporters. The subtle differences in lipid fingerprints results in varying membrane biophysical properties near the transporter. Our results highlight that the lipid-fingerprint of {SLC}6 transporters in complex membranes is highly dependent on membrane composition. Our results further characterize how the presence and identity of membrane proteins affects the complex interplay of lipid-protein interactions, influencing the local lipid environment and membrane biophysical properties.},
	pages = {100010},
	journaltitle = {{BBA} Advances},
	shortjournal = {{BBA} Advances},
	author = {Wilson, Katie A. and Wang, Lily and Lin, Yie Chang and O'Mara, Megan L.},
	urldate = {2022-08-03},
	date = {2021-01-01},
	langid = {english},
	keywords = {{SLC}6 transport proteins, {lLipid}-protein interactions, {mMembrane} analysis, {mMembrane} transporters, {mMolecular} dynamics, {nNeuronal} membrane},
}

@article{bouysset_prolif_2021,
	title = {{ProLIF}: a library to encode molecular interactions as fingerprints},
	volume = {13},
	issn = {1758-2946},
	url = {https://doi.org/10.1186/s13321-021-00548-6},
	doi = {10.1186/s13321-021-00548-6},
	shorttitle = {{ProLIF}},
	abstract = {Interaction fingerprints are vector representations that summarize the three-dimensional nature of interactions in molecular complexes, typically formed between a protein and a ligand. This kind of encoding has found many applications in drug-discovery projects, from structure-based virtual-screening to machine-learning. Here, we present {ProLIF}, a Python library designed to generate interaction fingerprints for molecular complexes extracted from molecular dynamics trajectories, experimental structures, and docking simulations. It can handle complexes formed of any combination of ligand, protein, {DNA}, or {RNA} molecules. The available interaction types can be fully reparametrized or extended by user-defined ones. Several tutorials that cover typical use-case scenarios are available, and the documentation is accompanied with code snippets showcasing the integration with other data-analysis libraries for a more seamless user-experience. The library can be freely installed from our {GitHub} repository (https://github.com/chemosim-lab/{ProLIF}).},
	pages = {72},
	number = {1},
	journaltitle = {Journal of Cheminformatics},
	shortjournal = {Journal of Cheminformatics},
	author = {Bouysset, Cédric and Fiorucci, Sébastien},
	urldate = {2022-08-03},
	date = {2021-09-25},
	keywords = {Docking, Interaction fingerprint, Molecular dynamics, Python, Structural biology, Virtual screening},
}

@article{kokh_workflow_2020,
	title = {A workflow for exploring ligand dissociation from a macromolecule: Efficient random acceleration molecular dynamics simulation and interaction fingerprint analysis of ligand trajectories},
	volume = {153},
	issn = {0021-9606},
	url = {https://aip.scitation.org/doi/10.1063/5.0019088},
	doi = {10.1063/5.0019088},
	shorttitle = {A workflow for exploring ligand dissociation from a macromolecule},
	abstract = {The dissociation of ligands from proteins and other biomacromolecules occurs over a wide range of timescales. For most pharmaceutically relevant inhibitors, these timescales are far beyond those that are accessible by conventional molecular dynamics ({MD}) simulation. Consequently, to explore ligand egress mechanisms and compute dissociation rates, it is necessary to enhance the sampling of ligand unbinding. Random Acceleration {MD} ({RAMD}) is a simple method to enhance ligand egress from a macromolecular binding site, which enables the exploration of ligand egress routes without prior knowledge of the reaction coordinates. Furthermore, the τ{RAMD} procedure can be used to compute the relative residence times of ligands. When combined with a machine-learning analysis of protein–ligand interaction fingerprints ({IFPs}), molecular features that affect ligand unbinding kinetics can be identified. Here, we describe the implementation of {RAMD} in {GROMACS} 2020, which provides significantly improved computational performance, with scaling to large molecular systems. For the automated analysis of {RAMD} results, we developed {MD}-{IFP}, a set of tools for the generation of {IFPs} along unbinding trajectories and for their use in the exploration of ligand dynamics. We demonstrate that the analysis of ligand dissociation trajectories by mapping them onto the {IFP} space enables the characterization of ligand dissociation routes and metastable states. The combined implementation of {RAMD} and {MD}-{IFP} provides a computationally efficient and freely available workflow that can be applied to hundreds of compounds in a reasonable computational time and will facilitate the use of τ{RAMD} in drug design.},
	pages = {125102},
	number = {12},
	journaltitle = {The Journal of Chemical Physics},
	shortjournal = {J. Chem. Phys.},
	author = {Kokh, Daria B. and Doser, Bernd and Richter, Stefan and Ormersbach, Fabian and Cheng, Xingyi and Wade, Rebecca C.},
	urldate = {2022-08-03},
	date = {2020-09-28},
	note = {Publisher: American Institute of Physics},
}

@software{alibay_ialibaymdrestraintsgenerator_2021,
	title = {{IAlibay}/{MDRestraintsGenerator}: {MDRestraintsGenerator} 0.1.0},
	url = {https://zenodo.org/record/4570556},
	shorttitle = {{IAlibay}/{MDRestraintsGenerator}},
	abstract = {First initial release of the {MDRestraintsGenerator} code. This release will be the first zenodo entry for this repository. Note: this code is not feature complete and non-{API} stable.},
	publisher = {Zenodo},
	author = {Alibay, Irfan},
	urldate = {2022-08-03},
	date = {2021-03-01},
	doi = {10.5281/zenodo.4570556},
}

@article{walters_code_2020,
	title = {Code Sharing in the Open Science Era},
	volume = {60},
	issn = {1549-9596},
	url = {https://doi.org/10.1021/acs.jcim.0c01000},
	doi = {10.1021/acs.jcim.0c01000},
	abstract = {Many high-profile scientific journals have established policies mandating the release of code accompanying papers that describe computational methods. Unfortunately, the majority of journals that publish papers in Computational Chemistry and Cheminformatics have yet to define such guidelines. This Viewpoint reviews the current state of reproducibility for the field and makes a case for the inclusion of code with computational papers.},
	pages = {4417--4420},
	number = {10},
	journaltitle = {Journal of Chemical Information and Modeling},
	shortjournal = {J. Chem. Inf. Model.},
	author = {Walters, W. Patrick},
	urldate = {2022-08-03},
	date = {2020-10-26},
	note = {Publisher: American Chemical Society},
}

@article{wilkinson_fair_2016,
	title = {The {FAIR} Guiding Principles for scientific data management and stewardship},
	volume = {3},
	rights = {2016 The Author(s)},
	issn = {2052-4463},
	url = {https://www.nature.com/articles/sdata201618},
	doi = {10.1038/sdata.2016.18},
	abstract = {There is an urgent need to improve the infrastructure supporting the reuse of scholarly data. A diverse set of stakeholders—representing academia, industry, funding agencies, and scholarly publishers—have come together to design and jointly endorse a concise and measureable set of principles that we refer to as the {FAIR} Data Principles. The intent is that these may act as a guideline for those wishing to enhance the reusability of their data holdings. Distinct from peer initiatives that focus on the human scholar, the {FAIR} Principles put specific emphasis on enhancing the ability of machines to automatically find and use the data, in addition to supporting its reuse by individuals. This Comment is the first formal publication of the {FAIR} Principles, and includes the rationale behind them, and some exemplar implementations in the community.},
	pages = {160018},
	number = {1},
	journaltitle = {Scientific Data},
	shortjournal = {Sci Data},
	author = {Wilkinson, Mark D. and Dumontier, Michel and Aalbersberg, {IJsbrand} Jan and Appleton, Gabrielle and Axton, Myles and Baak, Arie and Blomberg, Niklas and Boiten, Jan-Willem and da Silva Santos, Luiz Bonino and Bourne, Philip E. and Bouwman, Jildau and Brookes, Anthony J. and Clark, Tim and Crosas, Mercè and Dillo, Ingrid and Dumon, Olivier and Edmunds, Scott and Evelo, Chris T. and Finkers, Richard and Gonzalez-Beltran, Alejandra and Gray, Alasdair J. G. and Groth, Paul and Goble, Carole and Grethe, Jeffrey S. and Heringa, Jaap and ’t Hoen, Peter A. C. and Hooft, Rob and Kuhn, Tobias and Kok, Ruben and Kok, Joost and Lusher, Scott J. and Martone, Maryann E. and Mons, Albert and Packer, Abel L. and Persson, Bengt and Rocca-Serra, Philippe and Roos, Marco and van Schaik, Rene and Sansone, Susanna-Assunta and Schultes, Erik and Sengstag, Thierry and Slater, Ted and Strawn, George and Swertz, Morris A. and Thompson, Mark and van der Lei, Johan and van Mulligen, Erik and Velterop, Jan and Waagmeester, Andra and Wittenburg, Peter and Wolstencroft, Katherine and Zhao, Jun and Mons, Barend},
	urldate = {2022-08-03},
	date = {2016-03-15},
	langid = {english},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Publication characteristics, Research data},
}

@article{chue_hong_fair_2021,
	title = {{FAIR} Principles for Research Software ({FAIR}4RS Principles)},
	rights = {Creative Commons Attribution 4.0 International},
	url = {https://zenodo.org/record/6623556#.YqCJTJNBwlw},
	doi = {10.15497/RDA00068},
	abstract = {Research software is a fundamental and vital part of research worldwide, yet there remain significant challenges to software productivity, quality, reproducibility, and sustainability. Improving the practice of scholarship is a common goal of the open science, open source software and {FAIR} (Findable, Accessible, Interoperable and Reusable) communities, but improving the sharing of research software has not yet been a strong focus of the latter. To improve the {FAIRness} of research software, the {FAIR} for Research Software ({FAIR}4RS) Working Group has sought to understand how to apply the {FAIR} Guiding Principles for scientific data management and stewardship to research software, bringing together existing and new community efforts. Many of the {FAIR} Guiding Principles can be directly applied to research software by treating software and data as similar digital research objects. However, specific characteristics of software — such as its executability, composite nature, and continuous evolution and versioning — make it necessary to revise and extend the principles. This document presents the first version of the {FAIR} Principles for Research Software ({FAIR}4RS Principles). It is an outcome of the {FAIR} for Research Software Working Group ({FAIR}4RS {WG}). The {FAIR} for Research Software Working Group is jointly convened as an {RDA} Working Group, {FORCE}11 Working Group, and Research Software Alliance ({ReSA}) Task Force.},
	author = {Chue Hong, Neil P. and Katz, Daniel S. and Barker, Michelle and Lamprecht, Anna-Lena and Martinez, Carlos and Psomopoulos, Fotis E. and Harrow, Jen and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},
	editora = {Struck, Alexander and Lee, Allen and Loewe, Axel and Van Werkhoven, Ben and Jones, Catherine and Garijo, Daniel and Plomp, Esther and Genova, Francoise and Shanahan, Hugh and Leng, Joanna and Hellstrm, Maggie and Sandström, Malin and Sinha, Manodeep and Kuzak, Mateusz and Herterich, Patricia and Zhang, Qian and Islam, Sharif and Sansone, Susanna-Assunta and Pollard, Tom and Atmojo, Udayanto Dwi and Williams, Alan and Czerniak, Andreas and Nihues, Anna and Fouilloux, Anne Claire and Desinghu, Bala and Goble, Carole and Richard, Céline and Gray, Charles and Erdmann, Chris and Nüst, Daniel and Tartarini, Daniele and Ranguelova, Elena and Anzt, Hartwig and Todorov, Ilian and {McNally}, James and Moldon, Javier and Burnett, Jessica and Garrido-Sánchez, Julián and Belhajjame, Khalid and Sesink, Laurents and Hwang, Lorraine and Tovani-Palone, Marcos Roberto and Wilkinson, Mark D. and Servillat, Mathieu and Liffers, Matthias and Fox, Merc and Miljković, Nadica and Lynch, Nick and Lavanchy, Paula Martinez and Gesing, Sandra and Stevens, Sarah and Cuesta, Sergio Martinez and Peroni, Silvio and Soiland-Reyes, Stian and Bakker, Tom and Rabemanantsoa, Tovo and Sochat, Vanessa and Yehudi, Yo and Research Data Alliance {FAIR} For Research Software ({FAIR}4RS) {WG}},
	editoratype = {collaborator},
	urldate = {2022-08-03},
	date = {2021},
	langid = {english},
	note = {Publisher: Research Data Alliance},
}

@inproceedings{fan_pmda_2019,
	location = {Austin, {TX}},
	title = {{PMDA} - Parallel Molecular Dynamics Analysis},
	url = {https://conference.scipy.org/proceedings/scipy2019/shujie_fan.html},
	doi = {10.25080/Majora-7ddc1dd1-013},
	abstract = {{MDAnalysis} is an object-oriented Python library to analyze trajectories from molecular dynamics ({MD}) simulations in many popular formats. With the development of highly optimized {MD} software packages on high performance computing ({HPC}) resources, the size of simulation trajectories is growing up to many terabytes in size. However efficient usage of multicore architecture is a challenge for {MDAnalysis}, which does not yet provide a standard interface for parallel analysis. To address the challenge, we developed {PMDA}, a Python library that builds upon {MDAnalysis} to provide parallel analysis algorithms. {PMDA} parallelizes common analysis algorithms in {MDAnalysis} through a task-based approach with the Dask library. We implement a simple split-apply-combine scheme for parallel trajectory analysis. The trajectory is split into blocks, analysis is performed separately and in parallel on each block ({\textbackslash}textquotedbl\{\}apply{\textbackslash}textquotedbl\{\}), then results from each block are gathered and combined. {PMDA} allows one to perform parallel trajectory analysis with pre-defined analysis tasks. In addition, it provides a common interface that makes it easy to create user-defined parallel analysis modules. {PMDA} supports all schedulers in Dask, and one can run analysis in a distributed fashion on {HPC} machines, ad-hoc clusters, a single multi-core workstation or a laptop. We tested the performance of {PMDA} on single node and multiple nodes on a national supercomputer. The results show that parallelization improves the performance of trajectory analysis and, depending on the analysis task, can cut down time to solution from hours to minutes. Although still in alpha stage, it is already used on resources ranging from multi-core laptops to {XSEDE} supercomputers to speed up analysis of molecular dynamics trajectories. {PMDA} is available as open source under the {GNU} General Public License, version 2 and can be easily installed via the pip and conda package managers.},
	eventtitle = {{SciPy} 2019},
	pages = {134 -- 142},
	booktitle = {Proceedings of the 18th Python in Science Conference},
	author = {Fan, Shujie and Linke, Max and Paraskevakos, Ioannis and Gowers, Richard J. and Gecht, Michael and Beckstein, Oliver},
	editor = {Calloway, Chris and Lippa, David and Niederhut, Dillon and Shupe, David},
	date = {2019},
}

@inproceedings{khoshlessan_parallel_2017,
	location = {Austin, {TX}},
	title = {Parallel Analysis in {MDAnalysis} using the Dask Parallel Computing Library},
	url = {http://conference.scipy.org/proceedings/scipy2017/mahzad_khoslessan.html},
	doi = {10.25080/shinma-7f4c6e7-00a},
	eventtitle = {{SciPy} 2017},
	pages = {64--72},
	booktitle = {Proceedings of the 16th Python in Science Conference},
	author = {Khoshlessan, Mahzad and Paraskevakos, Ioannis and Jha, Shantenu and Beckstein, Oliver},
	editor = {Huff, Katy and Lippa, David and Niederhut, Dillon and Pacer, M},
	urldate = {2017-07-17},
	date = {2017},
}

@inproceedings{jakupovic_mpi-parallel_2021,
	location = {Austin, {TX}},
	title = {{MPI}-parallel Molecular Dynamics Trajectory Analysis with the H5MD Format in the {MDAnalysis} Python Package},
	url = {https://conference.scipy.org/proceedings/scipy2021/edis_jakupovic.html},
	doi = {10.25080/majora-1b6fd038-005},
	abstract = {Molecular dynamics ({MD}) computer simulations help elucidate details of the molecular processes in complex biological systems, from protein dynamics to drug discovery. One major issue is that these {MD} simulation files are now commonly terabytes in size, which means analyzing the data from these files becomes a painstakingly expensive task. In the age of national supercomputers, methods of parallel analysis are becoming a necessity for the efficient use of time and high performance computing ({HPC}) resources but for any approach to parallel analysis, simply reading the file from disk becomes the performance bottleneck that limits overall analysis speed. One promising way around this file I/O hurdle is to use a parallel message passing interface ({MPI}) implementation with the {HDF}5 (Hierarchical Data Format 5) file format to access a single file simultaneously with numerous processes on a parallel file system. Our previous feasibility study suggested that this combination can lead to favorable parallel scaling with hundreds of {CPU} cores, so we implemented a fast and user-friendly {HDF}5 reader (the H5MDReader class) that adheres to H5MD ({HDF}5 for Molecular Dynamics) specifications. We made H5MDReader (together with a H5MD output class H5MDWriter) available in the {MDAnalysis} library, a Python package that simplifies the process of reading and writing various popular {MD} file formats by providing a streamlined user-interface that is independent of any specific file format. We benchmarked H5MDReader's parallel file reading capabilities on three {HPC} clusters: {ASU} Agave, {SDSC} Comet, and {PSC} Bridges. The benchmark consisted of a simple split-apply-combine scheme of an I/O bound task that split a 90k frame (113 {GiB}) coordinate trajectory into chunks for processes, where each process performed the commonly used {RMSD} (root mean square distance after optimal structural superposition) calculation on their chunk of data, and then gathered the results back to the root process. For baseline performance, we found maximum I/O speedups at 2 full nodes, with Agave showing 20x, and a maximum computation speedup on Comet of 373x on 384 cores (all three {HPCs} scaled well in their computation task). We went on to test a series of optimizations attempting to speed up I/O performance, including adjusting file system stripe count, implementing a masked array feature that only loads relevant data for the computation task, front loading all I/O by loading the entire trajectory into memory, and manually adjusting the {HDF}5 dataset chunk shapes. We found the largest improvement in I/O performance by optimizing the chunk shape of the {HDF}5 datasets to match the iterative access pattern of our analysis benchmark. With respect to baseline serial performance, our best result was a 98x speedup at 112 cores on {ASU} Agave. In terms of absolute time saved, the analysis went from 4623 seconds in the baseline serial run to 47 seconds in the parallel, properly chunked run. Our results emphasize the fact that file I/O is not just dependent on the access pattern of the file, but more so the synergy between access pattern and the layout of the file on disk.},
	eventtitle = {{SciPy} 2021},
	pages = {40--48},
	booktitle = {Proceedings of the 20th Python in Science Conference},
	author = {Jakupovic, Edis and Beckstein, Oliver},
	editor = {Agarwal, Meghann and Calloway, Chris and Niederhut, Dillon and Shupe, David},
	urldate = {2021-07-05},
	date = {2021},
}

@article{michaud-agrawal_mdanalysis_2011,
	title = {{MDAnalysis}: A Toolkit for the Analysis of Molecular Dynamics Simulations},
	volume = {32},
	url = {http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3144279/},
	doi = {10.1002/jcc.21787},
	abstract = {{MDAnalysis} is an object-oriented library for structural and temporal analysis of molecular dynamics ({MD}) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful {NumPy} package to expose trajectory data as fast and efficient {NumPy} arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including {CHARMM}, Gromacs, and {NAMD} and the Protein Data Bank format can be read and written. Atoms can be selected with a syntax similar to {CHARMM}'s powerful selection commands. {MDAnalysis} enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. {MDAnalysis} has been tested on and works for most Unix-based platforms such as Linux and Mac {OS} X. It is freely available under the {GNU} Public License from http://mdanalysis.googlecode.com.},
	pages = {2319--2327},
	journaltitle = {J Comp Chem},
	author = {Michaud-Agrawal, Naveen and Denning, Elizabeth Jane and Woolf, Thomas B. and Beckstein, Oliver},
	date = {2011},
	keywords = {{MDAnalysis}, Python, molecular dynamics ({MD}) simulation},
}

@inproceedings{gowers_mdanalysis_2016,
	location = {Austin, {TX}},
	title = {{MDAnalysis}: A Python package for the rapid analysis of molecular dynamics simulations.},
	url = {http://conference.scipy.org/proceedings/scipy2016/oliver_beckstein.html},
	doi = {10.25080/Majora-629e541a-00e},
	abstract = {{MDAnalysis} (http://mdanalysis.org) is a library for structural and temporal analysis of molecular dynamics ({MD}) simulation trajectories and individual protein structures. {MD} simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on {HPC} resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. {MDAnalysis} addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted work flows, as foundations for other packages, and for interactive and rapid prototyping work in {IPython} / Jupyter notebooks, especially together with molecular visualization provided by nglview and time series analysis with pandas. {MDAnalysis} is written in Python and Cython and uses {NumPy} arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. {MDAnalysis} is available under the {GNU} General Public License v2.},
	eventtitle = {15th Scientific Computing with Python Conference ({SciPy} 2016)},
	pages = {102--109},
	booktitle = {Proceedings of the 15th Python in Science Conference},
	author = {Gowers, R. J and Linke, M. and Barnoud, J. and {T. J. E. Reddy} and Melo, M. N. and Seyler, S. L. and Dotson, D. L. and Domanski, J. and Buchoux, S. and Kenney, I. M. and Beckstein, O.},
	editor = {Benthall, Sebastian and Rostrup, Scott},
	date = {2016},
}

@report{hicks_its_nodate,
	title = {“It’s Like Coding in the Dark”:},
	pages = {25},
	institution = {Catharsis Consulting},
	type = {White Paper},
	author = {Hicks, Catherine},
	langid = {english},
}

@article{gardner_sustained_2022,
	title = {Sustained software development, not number of citations or journal choice, is indicative of accurate bioinformatic software},
	volume = {23},
	issn = {1474-760X},
	url = {https://doi.org/10.1186/s13059-022-02625-x},
	doi = {10.1186/s13059-022-02625-x},
	abstract = {Computational biology provides software tools for testing and making inferences about biological data. In the face of increasing volumes of data, heuristic methods that trade software speed for accuracy may be employed. We have studied these trade-offs using the results of a large number of independent software benchmarks, and evaluated whether external factors, including speed, author reputation, journal impact, recency and developer efforts, are indicative of accurate software.},
	pages = {56},
	number = {1},
	journaltitle = {Genome Biology},
	shortjournal = {Genome Biology},
	author = {Gardner, Paul P. and Paterson, James M. and {McGimpsey}, Stephanie and Ashari-Ghomi, Fatemeh and Umu, Sinan U. and Pawlik, Aleksandra and Gavryushkin, Alex and Black, Michael A.},
	urldate = {2022-02-23},
	date = {2022-02-16},
}

@report{grossfield_how_2021,
	title = {How to be a good member of a scientific software community [Article v0.1]},
	url = {https://osf.io/kgr45/},
	abstract = {Software is ubiquitous in modern science — almost any project, in almost any discipline, requires some code to work. However, many (or even most) scientists are not program- mers, and must rely on programs written and maintained by others. A crucial but often neglected part of a scientist’s training is learning how to use new tools, and how to exist as part of a community of users. This article will discuss key behaviors that can make the experience quicker, more efficient, and more pleasant for the user and developer alike.},
	institution = {{OSF} Preprints},
	author = {Grossfield, Alan},
	urldate = {2021-09-02},
	date = {2021-08-31},
	doi = {10.31219/osf.io/kgr45},
	note = {type: article},
	keywords = {Biochemistry, Biophysics, Education, Life Sciences, Physical Sciences and Mathematics, and Structural Biology},
}

@article{michael_r_walking_2013,
	title = {Walking the talk: adopting and adapting sustainable scientiﬁc software development processes in a small biology lab},
	url = {https://figshare.com/articles/GED_submission_to_First_Workshop_on_Sustainable_Software_for_Science_Practice_and_Experiences/791567},
	doi = {10.6084/m9.figshare.791567},
	shorttitle = {Walking the talk},
	abstract = {Walking the talk: adopting and adapting sustainable scientiﬁc software development processes in a small biology lab},
	author = {Michael R., Crusoe and C. Titus, Brown},
	urldate = {2016-01-13},
	date = {2013-09-07},
}

@article{de_buyl_h5md_2014,
	title = {H5MD: A structured, efficient, and portable file format for molecular data},
	volume = {185},
	issn = {0010-4655},
	url = {http://www.sciencedirect.com/science/article/pii/S0010465514000447},
	doi = {10.1016/j.cpc.2014.01.018},
	shorttitle = {H5MD},
	abstract = {We propose a new file format named “H5MD” for storing molecular simulation data, such as trajectories of particle positions and velocities, along with thermodynamic observables that are monitored during the course of the simulation. H5MD files are {HDF}5 (Hierarchical Data Format) files with a specific hierarchy and naming scheme. Thus, H5MD inherits many benefits of {HDF}5, e.g., structured layout of multi-dimensional datasets, data compression, fast and parallel I/O, and portability across many programming languages and hardware platforms. H5MD files are self-contained, and foster the reproducibility of scientific data and the interchange of data between researchers using different simulation programs and analysis software. In addition, the H5MD specification can serve for other kinds of data (e.g. experimental data) and is extensible to supplemental data, or may be part of an enclosing file structure.},
	pages = {1546--1553},
	number = {6},
	journaltitle = {Computer Physics Communications},
	shortjournal = {Computer Physics Communications},
	author = {de Buyl, Pierre and Colberg, Peter H. and Höfling, Felix},
	urldate = {2016-01-13},
	date = {2014-06},
	keywords = {{HDF}5, Molecular simulation},
}

@report{stodden_enabling_2009,
	location = {Rochester, {NY}},
	title = {Enabling Reproducible Research: Open Licensing for Scientific Innovation},
	url = {https://papers.ssrn.com/abstract=1362040},
	shorttitle = {Enabling Reproducible Research},
	abstract = {There is a gap in the current licensing and copyright structure for the growing number of scientists releasing their research publicly, particularly on the Internet. Scientific research produces more scholarship than the final paper: for example, the code, data structures, experimental design and parameters, documentation, and figures, are all important both for communication of the scholarship and replication of the results. {US} copyright law is a barrier to the sharing of scientific scholarship since it establishes exclusive rights for creators over their work, thereby limiting the ability of others to copy, use, build upon, or alter the research. This is precisely opposite to prevailing scientific norms, which provide both that results be replicated before accepted as knowledge, and that scientific understanding be built upon previous discoveries for which authorship recognition is given. In accordance with these norms and to encourage the release of all scientific scholarship, I propose the Reproducible Research Standard ({RRS}) both to ensure attribution and facilitate the sharing of scientific works. Using the {RRS} on all components of scientific scholarship will encourage reproducible scientific investigation, facilitate greater collaboration, and promote engagement of the larger community in scientific learning and discovery.},
	number = {{ID} 1362040},
	institution = {Social Science Research Network},
	type = {{SSRN} Scholarly Paper},
	author = {Stodden, Victoria},
	urldate = {2021-09-23},
	date = {2009-03-03},
	langid = {english},
	keywords = {Enabling Reproducible Research: Open Licensing for Scientific Innovation, {SSRN}, Victoria Stodden},
}