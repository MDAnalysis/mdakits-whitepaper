
@misc{chan_zuckerberg_initiative_napari_nodate,
	title = {napari hub},
	url = {https://www.napari-hub.org/about},
	urldate = {2022-08-05},
	journal = {napari hub {\textbar} About},
	author = {{Chan Zuckerberg Initiative}},
}

@misc{sofroniew_napari_2022,
	title = {napari: a multi-dimensional image viewer for {Python}},
	shorttitle = {napari},
	url = {https://doi.org/10.5281/zenodo.3555620},
	abstract = {napari 0.4.16 These are the preliminary release notes for 0.4.16 release candidates. The final release notes will be posted with the release on 2022-05-31. We're happy to announce the release of napari 0.4.16! napari is a fast, interactive, multi-dimensional image viewer for Python. It's designed for browsing, annotating, and analyzing large multi-dimensional images. It's built on top of Qt (for the GUI), vispy (for performant GPU-based rendering), and the scientific Python stack (numpy, scipy). For more information, examples, and documentation, please visit our website. File Opening Changes in 0.4.16 Prior to npe2, file opening with plugins worked through a cascade of function calls trying different readers until one worked, or all failed, in which case an error would be raised. Preferences for readers could be set by reordering hook implementations in the Call Order preference dialog. This behavior was slow, confusing, and often led to unexpected results. You can see more discussion on this in issue \#4000. npe2 supports readers declaring a list of accepted filename patterns, and PR \#3799 added a dialog for users to select a plugin to read their file (if more than one was available), and save a preference for that file extension. Before removing plugin call order, we want to make sure that file opening behavior across the GUI and command line is predictable, reproducible and explicit. After discussion in \#4102, \#4111 and this zulip thread, we decided that as a guiding principle, calling viewer.open should not infer a plugin choice for you, and any inference behavior should be opt in. This has led to the following API and GUI changes builtins is now the default value for the plugin argument in viewer.open. This means you should always explicitly pass a plugin to viewer.open, if you don't want to use builtins (and we encourage you to pass the argument anyway). To specify a plugin in a Python script: import napari viewer = napari.Viewer() viewer.open('my-path.tif') \# this will throw MultipleReaderError if napari\_tifffile is installed as both it and builtins could open the file viewer.open('my-path.tif', plugin='napari\_tifffile') \# this won't viewer.open will not inspect your file extension preferences, and will not choose among available plugins if you wish to opt into the "gui-like" behavior where your preferences are respected and we infer a plugin if just one is compatible with your file path, you must explicitly use plugin=None To opt into plugin inference behavior: import napari viewer = napari.Viewer() viewer.open('my-path.nd2', plugin=None) If multiple plugins could read your file, you will see a MultipleReaderError A preferred reader missing from current plugins will trigger a warning, but the preference will be otherwise ignored A preferred reader failing to read your file will result in an error e.g. if you saved napari\_tifffile as a preference for TIFFs but then tried to open a broken file To save a preference for a file pattern in Python, use: from napari.settings import get\_settings get\_settings().plugins.extension2reader['*.tif'] = 'napari\_tifffile' get\_settings().plugins.extension2reader['*.zarr'] = 'napari-ome-zarr' When opening a file through a GUI pathway (drag \& drop, File -{\textgreater} Open, Open Sample) with no preferences saved, you are provided with a dialog allowing you to choose among the various plugins that are compatible with your file This dialog also allows you to save a preference for files and folders with extensions This dialog also pops up if a preferred reader fails to open your file This dialog does not pop up if only one plugin can open your file Running napari path in the shell will also provide the reader dialog. You can still pass through a plugin choice, or layer keyword arguments To specify a plugin at the command line, use: napari my-path.tif --plugin napari\_tifffile Preference saving for file reading is now supported for filename patterns accepted by npe2 readers, rather than strictly file extensions Existing preferences for file extensions will be automatically updated e.g. .tif will become *.tif Reader preferences for filename patterns can be saved in the GUI via the preference dialog Reader preferences for folders are not yet supported in the GUI preference dialog - use the Python method above This will be addressed by the next release We have thought carefully about these choices, but there are still some open questions to address, and features to implement. Some of these are captured across the issues listed below, and we'd love to hear any feedback you have about the new behavior! How can we support selecting an individual reader within plugins that offer multiple \#4391 If two plugins can read a file, and one is builtins, should we use the other plugin as it's likely more bespoke \#4389 Provide a way to "force" the reader dialog to open regardless of saved preferences \#4388 Add filename pattern support for folders npe2 \#155 Highlights Added sphinx-gallery (\#4288) Add NAP process for major proposals (\#4299) Add ColorEncoding privately with tests (\#4357) Implement TextManager with StringEncoding (\#4198) Add NAP1: institutional and funding partners (\#4446) New Features Add alt-text to nbscreenshot output HTML images (\#3825) Support of transformation parameters for the interaction box (\#4301) Add function to show error in notification manager (\#4369) Improvements Faster 2D shape layer creation (\#3867) Npe2 enable/disable support (\#4086) Use QFormLayout for layer control grid (\#4195) Implement TextManager with StringEncoding (\#4198) Add size argument to Viewer.screenshot() (\#4201) fix error message when no reader available (\#4254) Allow remote .tiff files to be loaded (\#4284) refactor shape resizing logic and bugfix for \#4262 (\#4291) Accept None for scale (\#4295) Rewrite ellipse discretization from scratch (\#4330) Add ColorEncoding privately with tests (\#4357) Update TextManager benchmarks to use string/features (\#4364) add is\_diagonal utility and Transform property (\#4370) Add points size slider tooltip. (\#4393) Split\_channel makes base channel translucent, rest additive (\#4394) Vispy 0.10 (\#4401) Use syntax highlighter when printing stacktrace in GUI (\#4414) Accelerate adding large numbers of points (\#4549) use mip minip cutoff (\#4556) Warn user when preferred plugin for a file is missing (\#4545) Add preference saving from dialog for folders with extensions (\#4535) Add filename pattern to reader associations to preference dialog (\#4459) use imageio v2 api (\#4537) Bug Fixes Fix erroneous point deletion when pressing delete key on layer (\#4259) Bugfix: Divide by zero error making empty shapes layer (\#4267) Bugfix: Conversion between Label and Image with original scaling (\#4272) Address concurrent refresh in plugin list during multiple (un)installs (\#4283) Delay import of \_npe2 module in napari.main to prevent duplicate discovery of plugins (\#4311) Fix black line ellipse (\#4312) Fix Labels.fill when Labels.data is an xarray.DataArray (\#4314) Fix image and label layer values reported in GUI status bar when display is 3D (\#4315) Quick fix for colormap updates not updating QtColorBox. (\#4321) Update black version because of break of private API in its dependency (\#4327) Fix progress update signature (\#4333) move pixel center offset code into \_ImageBase (\#4352) Fix TextManager to work with vispy when using string constants (\#4362) Fix format string encoding for all numeric features (\#4363) Bugfix/broadcast projections by reducing number of axes (keepdims=False) (\#4376) Correctly order vispy layers on insertion (\#4433) napari --info: list npe2 plugins (\#4445) Bugfix/Add affine to base\_dict via \_get\_base\_state() (\#4453) Fix layer control pop-up issue (\#4460) fix Re-setting shapes data to initial data fails, but only in 3D (\#4550) Make sure we pass plugin through if opening file as stack (\#4515) Fix update of plugins and disable update button if not available on conda forge (for bundle) (\#4512) Connect napari events first to EventEmitter (\#4480) Fix AttributeError: 'LayerList' object has no attribute 'name' (\#4276) Fix \_BaseEventedItemModel.flags (\#4558) Bug fix: blending multichannel images and 3D points (\#4567) Fix checkable menu entries when using PySide2 backend (\#4581) Documentation New Example: Creating reproducible screenshots with a viewer loop (\#3947) add workshops (\#4188) Replace image pyramid with multiscale image in the docs. (\#4202) Uniform install instructions. (\#4206) Use features instead of properties in bbox\_annotator example (\#4218) DOC: pep on python.org have moved. (\#4237) Fix quick start links (\#4239) Add napari.yaml to first plugin file layout (\#4243) Improve "index" pages content (\#4251) Fix links in docs (\#4257) Bring back example notebook from back in time. (\#4261) Fix README links Contributing Guide, Mission\&Values, Code of Conduct, \& GovModel (\#4269) Minor copy update: Usage page (\#4278) Minor copy update: Segmentation tutorial page (\#4279) Minor copy update: Annotations tutorial page (\#4280) Minor copy update: Tracking tutorial page (\#4282) Add napari.utils.notifications to the API docs (\#4286) Added sphinx-gallery (\#4288) Add NAP process for major proposals (\#4299) Update best\_practices.md (\#4305) Fix broken link and adds packaging page to toc (\#4335) Add napari.utils.events to API doc (\#4338) add alt text workshop (\#4373) Add and/or update documentation alt text (\#4375) Add napari.window to API docs (\#4379) Convert remaining .gifs to .webm (\#4392) Add naps to the TOC (\#4407) DOC Fix Broken links in the governance section of README (\#4408) DOC Fix error in Using the image layer {\textgreater} A simple example (\#4411) DOC Small fixes in 'Using the image layer' (\#4418) Fix docs warnings related to NAPs (\#4429) Add parser for Events section in docstrings (\#4430) Fixes several sphinx warnings. (\#4432) DOC Fix typo in 'Using the shapes layer' (\#4438) Fix events rendering in docs for components.LayerList (\#4442) Add NAP1: institutional and funding partners (\#4446) Update to the documentation: add viewer.dims.current\_step tips (\#4454) Add information about new file opening behaviour (\#4516) API Changes Update file opening behavior to ensure consistency across command line and GUI. (\#4347) Warn user when preferred plugin for a file is missing (\#4545) Make builtins default plugin for viewer.open (\#4574) UI Changes Hide console toggle button and ignore corresponding keybinding for ipython (\#4240) (Note: previously, this button was present but opened an empty/broken console, so this is strictly an improvement!) Allow resizing left dock widgets (\#4368) Add filename pattern to reader associations to preference dialog (\#4459) Add preference saving from dialog for folders with extensions \#4535 Make sure npe2 and npe1 builtins are available in dialogs (\#4575) Open reader dialog when running napari from shell (\#4569) Deprecations Build Tools singularity and docker container images from CI (\#3965) Test bundle installation in CI (\#4307) Use conda-forge/napari-feedstock source on main (\#4309) add project\_urls to setup.cfg metadata to improve project metadata on PyPI (\#4317) Fix minreq test take 3. (\#4329) bundle\_conda: ignore unlink errors on cleanup (\#4387) Move nap flowchart to lfs (\#4403) Use installer version instead of napari version for default paths (\#4444) add custom final condarc to bundle (\#4447) Add doc specific Makefile (\#4452) Set TMP on Windows+Mamba subprocesses if not set (\#4462) Update test\_typing.yml (\#4475) Fix make-typestubs: use union for type hint instead of '{\textbar}' (\#4476) [conda] rework how plugin install/remove subprocesses receive the parent environment (\#4520) [conda] revert default installation path (\#4525) Pin vispy to {\textless}0.11 to prevent future breakages (\#4594) Other Pull Requests adds citation file (\#3470) Add tests for \_npe2.py (\#4103) Decrease LFS size, gif -{\textgreater} webm. (\#4207) Run PNG crush on all Pngs. (\#4208) Refactor toward fixing local value capturing. (\#4212) Minor error message improvement. (\#4219) Bump npe2 to 0.2.0 and fix typing tests (\#4241) Remove headless test ignore, move orient\_plane\_normal test (\#4245) [pre-commit.ci] pre-commit autoupdate (\#4255) catch elementwise comparison warning that now shows frequently on layer creation (\#4256) fix octree imports (\#4264) Raise error when binding a button to a generator function (\#4265) MAINT: coverage lines +1 (\#4297) bump scipy minimum requirement from 1.4.0 to 1.4.1 (\#4310) MAINT: separate ImportError from ModuleNotFoundError (\#4339) [pre-commit.ci] pre-commit autoupdate (\#4354) Remove 'of' from 'in this example of we will' (\#4356) Fix npe2 import according to 0.3.0 deprecation warning (\#4367) [pre-commit.ci] pre-commit autoupdate (\#4378) add test for generate\_3D\_edge\_meshes (\#4416) Fix mypy error in CI (\#4439) Make npe2 writer test more lenient (\#4457) 33 authors added to this release (alphabetical) aeisenbarth - @aeisenbarth alisterburt - @alisterburt Andrey Aristov - @aaristov Andy Sweet - @andy-sweet chili-chiu - @chili-chiu Chris Wood - @cwood1967 David Stansby - @dstansby Draga Doncila Pop - @DragaDoncila Eric Perlman - @perlman Genevieve Buckley - @GenevieveBuckley Gonzalo Peña-Castellanos - @goanpeca Gregory Lee - @grlee77 Grzegorz Bokota - @Czaki Isabela Presedo-Floyd - @isabela-pf Jaime Rodríguez-Guerra - @jaimergp Jan-Hendrik Müller - @kolibril13 Juan Nunez-Iglesias - @jni Justin Kiggins - @neuromusic Lorenzo Gaifas - @brisvag Lucy Liu - @lucyleeow Marc Boucsein - @MBPhys Marcelo Zoccoler - @zoccoler Martin Weigert - @maweigert Matthias Bussonnier - @Carreau Melissa Weber Mendonça - @melissawm Pam - @ppwadhwa Peter Sobolewski - @psobolewskiPhD pre-commit-ci[bot] - @pre-commit-ci[bot] Talley Lambert - @tlambert03 Tom di Mino - @tdimino Tru Huynh - @truatpasteurdotfr Yuki Mochizuki - @2dx Ziyang Liu - @potating-potato 42 reviewers added to this release (alphabetical) Alan R Lowe - @quantumjot alisterburt - @alisterburt Andrea PIERRÉ - @kir0ul Andy Sweet - @andy-sweet chili-chiu - @chili-chiu David Stansby - @dstansby Draga Doncila Pop - @DragaDoncila Eric Perlman - @perlman Genevieve Buckley - @GenevieveBuckley Gonzalo Peña-Castellanos - @goanpeca Gregory Lee - @grlee77 Grzegorz Bokota - @Czaki Hagai Har-Gil - @HagaiHargil Hector - @hectormz Isabela Presedo-Floyd - @isabela-pf Jaime Rodríguez-Guerra - @jaimergp Jan-Hendrik Müller - @kolibril13 Jordão Bragantini - @JoOkuma Juan Nunez-Iglesias - @jni Justin Kiggins - @neuromusic Justine Larsen - @justinelarsen Kevin Yamauchi - @kevinyamauchi Lorenzo Gaifas - @brisvag Lucy Liu - @lucyleeow Lucy Obus - @LCObus Lukasz Migas - @lukasz-migas Marc Boucsein - @MBPhys Marcelo Zoccoler - @zoccoler Martin Weigert - @maweigert Matthias Bussonnier - @Carreau Melissa Weber Mendonça - @melissawm Nathan Clack - @nclack Nicholas Sofroniew - @sofroniewn Pam - @ppwadhwa Peter Boone - @boonepeter Peter Sobolewski - @psobolewskiPhD Philip Winston - @pwinston Robert Haase - @haesleinhuepf Talley Lambert - @tlambert03 Tru Huynh - @truatpasteurdotfr Volker Hilsenstein - @VolkerH Ziyang Liu - @potating-potato},
	urldate = {2022-08-04},
	publisher = {Zenodo},
	author = {Sofroniew, Nicholas and Lambert, Talley and Evans, Kira and Nunez-Iglesias, Juan and Bokota, Grzegorz and Winston, Philip and Peña-Castellanos, Gonzalo and Yamauchi, Kevin and Bussonnier, Matthias and Doncila Pop, Draga and Can Solak, Ahmet and Liu, Ziyang and Wadhwa, Pam and Burt, Alister and Buckley, Genevieve and Sweet, Andrew and Migas, Lukasz and Hilsenstein, Volker and Gaifas, Lorenzo and Bragantini, Jordão and Rodríguez-Guerra, Jaime and Muñoz, Hector and Freeman, Jeremy and Boone, Peter and Lowe, Alan and Gohlke, Christoph and Royer, Loic and PIERRÉ, Andrea and Har-Gil, Hagai and McGovern, Abigail},
	month = may,
	year = {2022},
	doi = {10.5281/zenodo.3555620},
}

@misc{krekel_pytest-devpytest_2004,
	title = {pytest-dev/pytest},
	copyright = {MIT},
	url = {https://github.com/pytest-dev/pytest},
	urldate = {2022-08-04},
	publisher = {pytest-dev},
	author = {Krekel, H. and Oliveira, B. and Pfannschmidt, R. and Bruynooghe, F. and Laugher, B. and Bruhin, F.},
	year = {2004},
	keywords = {hacktoberfest, python, test, testing, unit-testing},
}

@misc{noauthor_submitting_2018,
	title = {Submitting a paper to {JOSS}},
	url = {https://joss.readthedocs.io/en/latest/submitting.html},
	urldate = {2022-08-03},
	year = {2018},
}

@misc{github_inc_github_2022,
	title = {{GitHub} {Terms} of {Service}},
	url = {https://docs.github.com/en/site-policy/github-terms/github-terms-of-service},
	abstract = {Get started, troubleshoot, and make the most of GitHub. Documentation for new users, developers, administrators, and all of GitHub's products.},
	language = {en},
	urldate = {2022-08-04},
	journal = {GitHub Docs},
	author = {{GitHub, Inc}},
	year = {2022},
}

@misc{github_inc_github_2022-1,
	title = {{GitHub} {Actions}},
	url = {https://github.com/features/actions},
	abstract = {Easily build, package, release, update, and deploy your project in any language—on GitHub or any external system—without having to run code yourself.},
	language = {en},
	urldate = {2022-08-04},
	journal = {GitHub},
	author = {{GitHub, Inc}},
	year = {2022},
}

@misc{read_the_docs_inc_read_2022,
	title = {Read the {Docs}},
	url = {https://readthedocs.org/},
	urldate = {2022-08-04},
	author = {{Read the Docs, Inc}},
	year = {2022},
}

@misc{codecov_llc_codecov_2022,
	title = {Codecov},
	url = {https://about.codecov.io/},
	abstract = {Codecov is the leading, dedicated code coverage solution. Try Codecov for free now to help your developers find untested code and deploy changes with confidence.},
	language = {en-US},
	urldate = {2022-08-04},
	journal = {Codecov - The Leading Code Coverage Solution},
	author = {{Codecov LLC}},
	year = {2022},
}

@misc{atlassian_bitbucket_2022,
	title = {Bitbucket},
	url = {https://bitbucket.org/product},
	abstract = {Bitbucket Cloud is a Git-based code and CI/CD tool optimized for teams using Jira.},
	language = {en},
	urldate = {2022-08-04},
	journal = {Bitbucket},
	author = {Atlassian},
	year = {2022},
}

@misc{gitlab_inc_gitlab_2022,
	title = {{GitLab}},
	url = {https://about.gitlab.com/},
	abstract = {From planning to production, bring teams together in one application. Ship secure code faster, deploy to any cloud, and drive business results.},
	language = {en},
	urldate = {2022-08-04},
	journal = {About GitLab},
	author = {{GitLab Inc.}},
	year = {2022},
}

@misc{github_inc_github_2022-2,
	title = {{GitHub}},
	url = {https://github.com},
	abstract = {GitHub is where people build software. More than 83 million people use GitHub to discover, fork, and contribute to over 200 million projects.},
	language = {en},
	urldate = {2022-08-04},
	journal = {GitHub},
	author = {GitHub, Inc},
	year = {2022},
}

@article{conda-forge_community_conda-forge_2015,
	title = {The conda-forge {Project}: {Community}-based {Software} {Distribution} {Built} on the conda {Package} {Format} and {Ecosystem}},
	copyright = {Creative Commons Attribution 3.0 United States, Open Access},
	shorttitle = {The conda-forge {Project}},
	url = {https://zenodo.org/record/4774216},
	doi = {10.5281/ZENODO.4774216},
	abstract = {conda-forge is a community-led project that develops centralized build infrastructure and software packages for the conda package format and ecosystem. If you'd like to credit the conda-forge project in your work, please cite this entry. See www.conda-forge.org for more details.},
	urldate = {2022-08-04},
	author = {Conda-Forge Community},
	month = jul,
	year = {2015},
	note = {Publisher: Zenodo},
}

@misc{noauthor_pypi_nodate,
	title = {{PyPI} · {The} {Python} {Package} {Index}},
	url = {https://pypi.org/},
	abstract = {The Python Package Index (PyPI) is a repository of software for the Python programming language.},
	language = {en},
	urldate = {2022-08-04},
	journal = {PyPI},
}

@misc{noauthor_poetry_nodate,
	title = {Poetry - {Python} dependency management and packaging made easy},
	url = {https://python-poetry.org/},
	urldate = {2022-08-04},
}

@misc{noauthor_pypasetuptools_2022,
	title = {pypa/setuptools},
	copyright = {MIT},
	url = {https://github.com/pypa/setuptools},
	abstract = {Official project repository for the Setuptools build system},
	urldate = {2022-08-04},
	publisher = {Python Packaging Authority},
	month = aug,
	year = {2022},
	note = {original-date: 2016-03-29T14:02:33Z},
}

@misc{noauthor_pep_nodate,
	title = {{PEP} 257 – {Docstring} {Conventions} {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0257/},
	urldate = {2022-08-04},
}

@misc{noauthor_git_nodate,
	title = {Git},
	url = {https://git-scm.com/},
	urldate = {2022-08-04},
}

@misc{noauthor_pep_nodate-1,
	title = {{PEP} 440 – {Version} {Identification} and {Dependency} {Specification} {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0440/},
	urldate = {2022-08-04},
}

@misc{preston-werner_semantic_nodate,
	title = {Semantic {Versioning} 2.0.0},
	url = {https://semver.org/},
	abstract = {Semantic Versioning spec and website},
	language = {en},
	urldate = {2022-08-04},
	journal = {Semantic Versioning},
	author = {Preston-Werner, Tom},
}

@misc{noauthor_gnu_nodate,
	title = {{GNU} {General} {Public} {License} v2.0 - {GNU} {Project} - {Free} {Software} {Foundation}},
	url = {https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html},
	urldate = {2022-08-04},
}

@misc{loche_maicos_2022,
	title = {{MAICoS}},
	url = {https://gitlab.com/maicos-devel/maicos},
	abstract = {MAICoS is the acronym for Molecular Analysis for Interfacial
and Confined Systems. It is an object-oriented python toolkit for
analysing the structure and dynamics of interfacial and confined
fluids from molecular simulations. Combined with MDAnalysis,
MAICoS can be used to extract density profiles, dielectric constants,
structure factors, or transport properties from trajectories files,
including LAMMPS, GROMACS, CHARMM or NAMD data. MAICoS is open source
and is released under the GNU general public license v3.0.},
	urldate = {2022-08-04},
	author = {Loche, Philip and Jaeger, Henrik and Schlaich, Alexander and Becker, Maximilian and Gravelle, Simon and Stärk, Philipp and Velpuri, Srihas},
	month = feb,
	year = {2022},
}

@article{araya-secchi_characterization_2014,
	title = {Characterization of a {Novel} {Water} {Pocket} {Inside} the {Human} {Cx26} {Hemichannel} {Structure}},
	volume = {107},
	issn = {0006-3495},
	url = {https://www.sciencedirect.com/science/article/pii/S0006349514006018},
	doi = {10.1016/j.bpj.2014.05.037},
	abstract = {Connexins (Cxs) are a family of vertebrate proteins constituents of gap junction channels (GJCs) that connect the cytoplasm of adjacent cells by the end-to-end docking of two Cx hemichannels. The intercellular transfer through GJCs occurs by passive diffusion allowing the exchange of water, ions, and small molecules. Despite the broad interest to understand, at the molecular level, the functional state of Cx-based channels, there are still many unanswered questions regarding structure-function relationships, perm-selectivity, and gating mechanisms. In particular, the ordering, structure, and dynamics of water inside Cx GJCs and hemichannels remains largely unexplored. In this work, we describe the identification and characterization of a believed novel water pocket—termed the IC pocket—located in-between the four transmembrane helices of each human Cx26 (hCx26) monomer at the intracellular (IC) side. Using molecular dynamics (MD) simulations to characterize hCx26 internal water structure and dynamics, six IC pockets were identified per hemichannel. A detailed characterization of the dynamics and ordering of water including conformational variability of residues forming the IC pockets, together with multiple sequence alignments, allowed us to propose a functional role for this cavity. An in vitro assessment of tracer uptake suggests that the IC pocket residue Arg-143 plays an essential role on the modulation of the hCx26 hemichannel permeability.},
	language = {en},
	number = {3},
	urldate = {2022-08-04},
	journal = {Biophysical Journal},
	author = {Araya-Secchi, Raul and Perez-Acle, Tomas and Kang, Seung-gu and Huynh, Tien and Bernardin, Alejandro and Escalona, Yerko and Garate, Jose-Antonio and Martínez, Agustin D. and García, Isaac E. and Sáez, Juan C. and Zhou, Ruhong},
	month = aug,
	year = {2014},
	pages = {599--612},
}

@misc{wang_cookiecutter_nodate,
	title = {Cookiecutter for {MDAnalysis}-based packages},
	url = {https://github.com/MDAnalysis/cookiecutter-mdakit},
	abstract = {A cookiecutter template for those interested in developing packages based on MDAnalysis. Skeletal starting repositories can be created from this template to create the file structure semi-autonomously so you can focus on what's important: the science!

The skeletal structure is designed to help you get started, but do not feel limited by the skeleton's features included here. Just to name a few things you can alter to suit your needs: change continuous integration options, remove deployment platforms, or test with a different suite.},
	urldate = {2022-07-29},
	publisher = {MDAnalysis},
	author = {Wang, Lily and Alibay, Irfan and Naughton, Fiona},
}

@misc{noauthor_aiida_nodate,
	title = {{AiiDA} plugin registry},
	url = {https://aiidateam.github.io/aiida-registry/},
	abstract = {The Journal of Open Source Software is a developer friendly, open access journal for research software packages.},
}

@misc{noauthor_journal_nodate,
	title = {Journal of {Open} {Source} {Software}},
	url = {https://joss.theoj.org},
	abstract = {The Journal of Open Source Software is a developer friendly, open access journal for research software packages.},
}

@misc{noauthor_scopus_nodate,
	title = {Scopus},
	url = {https://www.scopus.com/},
}

@misc{halchenko_duecreditduecredit_2021,
	title = {duecredit/duecredit: 0.9.1},
	shorttitle = {duecredit/duecredit},
	url = {https://zenodo.org/record/4685131},
	abstract = {🐛 Bug Fix Set up intuit auto to automate releases \#178 (@jwodder @yarikoptic) BF: make pypi upload happen in py 3.8 matrix (2.7 was removed) \#178 (@yarikoptic) Authors: 2 John T. Wodder II (@jwodder) Yaroslav Halchenko (@yarikoptic)},
	urldate = {2022-08-03},
	publisher = {Zenodo},
	author = {Halchenko, Yaroslav O. and Visconti di Oleggio Castello, Matteo and Hanke, Michael and Gors, Jason and Szczepanik, Michał and Barnes, Chris and Irvine, Emily and Raamana, Pradeep Reddy and Markiewicz, Christopher J. and Wilk, Jakub and Volgyes, David and Leinweber, Katrin and Estève, Loïc and Beckstein, Oliver and Gulban, Omer Faruk},
	month = apr,
	year = {2021},
	doi = {10.5281/zenodo.4685131},
	keywords = {citation tracking, software citation},
}

@article{bonomi_promoting_2019,
	title = {Promoting transparency and reproducibility in enhanced molecular simulations},
	volume = {16},
	copyright = {2019 Springer Nature America, Inc.},
	issn = {1548-7105},
	url = {https://www.nature.com/articles/s41592-019-0506-8},
	doi = {10.1038/s41592-019-0506-8},
	abstract = {The PLUMED consortium unifies developers and contributors to PLUMED, an open-source library for enhanced-sampling, free-energy calculations and the analysis of molecular dynamics simulations. Here, we outline our efforts to promote transparency and reproducibility by disseminating protocols for enhanced-sampling molecular simulations.},
	language = {en},
	number = {8},
	urldate = {2022-08-03},
	journal = {Nature Methods},
	author = {Bonomi, Massimiliano and Bussi, Giovanni and Camilloni, Carlo and Tribello, Gareth A. and Banáš, Pavel and Barducci, Alessandro and Bernetti, Mattia and Bolhuis, Peter G. and Bottaro, Sandro and Branduardi, Davide and Capelli, Riccardo and Carloni, Paolo and Ceriotti, Michele and Cesari, Andrea and Chen, Haochuan and Chen, Wei and Colizzi, Francesco and De, Sandip and De La Pierre, Marco and Donadio, Davide and Drobot, Viktor and Ensing, Bernd and Ferguson, Andrew L. and Filizola, Marta and Fraser, James S. and Fu, Haohao and Gasparotto, Piero and Gervasio, Francesco Luigi and Giberti, Federico and Gil-Ley, Alejandro and Giorgino, Toni and Heller, Gabriella T. and Hocky, Glen M. and Iannuzzi, Marcella and Invernizzi, Michele and Jelfs, Kim E. and Jussupow, Alexander and Kirilin, Evgeny and Laio, Alessandro and Limongelli, Vittorio and Lindorff-Larsen, Kresten and Löhr, Thomas and Marinelli, Fabrizio and Martin-Samos, Layla and Masetti, Matteo and Meyer, Ralf and Michaelides, Angelos and Molteni, Carla and Morishita, Tetsuya and Nava, Marco and Paissoni, Cristina and Papaleo, Elena and Parrinello, Michele and Pfaendtner, Jim and Piaggi, Pablo and Piccini, GiovanniMaria and Pietropaolo, Adriana and Pietrucci, Fabio and Pipolo, Silvio and Provasi, Davide and Quigley, David and Raiteri, Paolo and Raniolo, Stefano and Rydzewski, Jakub and Salvalaglio, Matteo and Sosso, Gabriele Cesare and Spiwok, Vojtěch and Šponer, Jiří and Swenson, David W. H. and Tiwary, Pratyush and Valsson, Omar and Vendruscolo, Michele and Voth, Gregory A. and White, Andrew and {The PLUMED consortium}},
	month = aug,
	year = {2019},
	note = {Number: 8
Publisher: Nature Publishing Group},
	keywords = {Culture, Software},
	pages = {670--673},
}

@article{abraham_gromacs_2015,
	title = {{GROMACS}: {High} performance molecular simulations through multi-level parallelism from laptops to supercomputers},
	volume = {1-2},
	issn = {2352-7110},
	shorttitle = {{GROMACS}},
	url = {https://www.sciencedirect.com/science/article/pii/S2352711015000059},
	doi = {10.1016/j.softx.2015.06.001},
	abstract = {GROMACS is one of the most widely used open-source and free software codes in chemistry, used primarily for dynamical simulations of biomolecules. It provides a rich set of calculation types, preparation and analysis tools. Several advanced techniques for free-energy calculations are supported. In version 5, it reaches new performance heights, through several new and enhanced parallelization algorithms. These work on every level; SIMD registers inside cores, multithreading, heterogeneous CPU–GPU acceleration, state-of-the-art 3D domain decomposition, and ensemble-level parallelization through built-in replica exchange and the separate Copernicus framework. The latest best-in-class compressed trajectory storage format is supported.},
	language = {en},
	urldate = {2022-08-03},
	journal = {SoftwareX},
	author = {Abraham, Mark James and Murtola, Teemu and Schulz, Roland and Páll, Szilárd and Smith, Jeremy C. and Hess, Berk and Lindahl, Erik},
	month = sep,
	year = {2015},
	keywords = {Free energy, GPU, Molecular dynamics, SIMD},
	pages = {19--25},
}

@article{roe_ptraj_2013,
	title = {{PTRAJ} and {CPPTRAJ}: {Software} for {Processing} and {Analysis} of {Molecular} {Dynamics} {Trajectory} {Data}},
	volume = {9},
	issn = {1549-9618},
	shorttitle = {{PTRAJ} and {CPPTRAJ}},
	url = {https://doi.org/10.1021/ct400341p},
	doi = {10.1021/ct400341p},
	abstract = {We describe PTRAJ and its successor CPPTRAJ, two complementary, portable, and freely available computer programs for the analysis and processing of time series of three-dimensional atomic positions (i.e., coordinate trajectories) and the data therein derived. Common tools include the ability to manipulate the data to convert among trajectory formats, process groups of trajectories generated with ensemble methods (e.g., replica exchange molecular dynamics), image with periodic boundary conditions, create average structures, strip subsets of the system, and perform calculations such as RMS fitting, measuring distances, B-factors, radii of gyration, radial distribution functions, and time correlations, among other actions and analyses. Both the PTRAJ and CPPTRAJ programs and source code are freely available under the GNU General Public License version 3 and are currently distributed within the AmberTools 12 suite of support programs that make up part of the Amber package of computer programs (see http://ambermd.org). This overview describes the general design, features, and history of these two programs, as well as algorithmic improvements and new features available in CPPTRAJ.},
	number = {7},
	urldate = {2022-08-03},
	journal = {Journal of Chemical Theory and Computation},
	author = {Roe, Daniel R. and Cheatham, Thomas E.},
	month = jul,
	year = {2013},
	note = {Publisher: American Chemical Society},
	pages = {3084--3095},
}

@article{tiberti_encore_2015,
	title = {{ENCORE}: {Software} for {Quantitative} {Ensemble} {Comparison}},
	volume = {11},
	issn = {1553-7358},
	shorttitle = {{ENCORE}},
	url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004415},
	doi = {10.1371/journal.pcbi.1004415},
	abstract = {There is increasing evidence that protein dynamics and conformational changes can play an important role in modulating biological function. As a result, experimental and computational methods are being developed, often synergistically, to study the dynamical heterogeneity of a protein or other macromolecules in solution. Thus, methods such as molecular dynamics simulations or ensemble refinement approaches have provided conformational ensembles that can be used to understand protein function and biophysics. These developments have in turn created a need for algorithms and software that can be used to compare structural ensembles in the same way as the root-mean-square-deviation is often used to compare static structures. Although a few such approaches have been proposed, these can be difficult to implement efficiently, hindering a broader applications and further developments. Here, we present an easily accessible software toolkit, called ENCORE, which can be used to compare conformational ensembles generated either from simulations alone or synergistically with experiments. ENCORE implements three previously described methods for ensemble comparison, that each can be used to quantify the similarity between conformational ensembles by estimating the overlap between the probability distributions that underlie them. We demonstrate the kinds of insights that can be obtained by providing examples of three typical use-cases: comparing ensembles generated with different molecular force fields, assessing convergence in molecular simulations, and calculating differences and similarities in structural ensembles refined with various sources of experimental data. We also demonstrate efficient computational scaling for typical analyses, and robustness against both the size and sampling of the ensembles. ENCORE is freely available and extendable, integrates with the established MDAnalysis software package, reads ensemble data in many common formats, and can work with large trajectory files.},
	language = {en},
	number = {10},
	urldate = {2022-08-03},
	journal = {PLOS Computational Biology},
	author = {Tiberti, Matteo and Papaleo, Elena and Bengtsen, Tone and Boomsma, Wouter and Lindorff-Larsen, Kresten},
	month = oct,
	year = {2015},
	note = {Publisher: Public Library of Science},
	keywords = {Algorithms, Biochemical simulations, Biophysical simulations, Computer software, Molecular dynamics, Probability distribution, Protein structure, Protein structure comparison},
	pages = {e1004415},
}

@misc{gowers_kugupukugupu_2021,
	title = {kugupu/kugupu: v0.1.2},
	shorttitle = {kugupu/kugupu},
	url = {https://zenodo.org/record/4545322},
	abstract = {Beta release},
	urldate = {2022-08-03},
	publisher = {Zenodo},
	author = {Gowers, Richard and Matta, Micaela and Nguyen, Hai},
	month = feb,
	year = {2021},
	doi = {10.5281/zenodo.4545322},
}

@article{smith_lipyphilic_2021,
	title = {{LiPyphilic}: {A} {Python} {Toolkit} for the {Analysis} of {Lipid} {Membrane} {Simulations}},
	volume = {17},
	issn = {1549-9618},
	shorttitle = {{LiPyphilic}},
	url = {https://doi.org/10.1021/acs.jctc.1c00447},
	doi = {10.1021/acs.jctc.1c00447},
	abstract = {Molecular dynamics simulations are now widely used to study emergent phenomena in lipid membranes with complex compositions. Here, we present LiPyphilic—a fast, fully tested, and easy-to-install Python package for analyzing such simulations. Analysis tools in LiPyphilic include the identification of cholesterol flip-flop events, the classification of local lipid environments, and the degree of interleaflet registration. LiPyphilic is both force field- and resolution-agnostic, and by using the powerful atom selection language of MDAnalysis, it can handle membranes with highly complex compositions. LiPyphilic also offers two on-the-fly trajectory transformations to (i) fix membranes split across periodic boundaries and (ii) perform nojump coordinate unwrapping. Our implementation of nojump unwrapping accounts for fluctuations in the box volume under the NPT ensemble—an issue that most current implementations have overlooked. The full documentation of LiPyphilic, including installation instructions and links to interactive online tutorials, is available at https://lipyphilic.readthedocs.io/en/latest.},
	number = {9},
	urldate = {2022-08-03},
	journal = {Journal of Chemical Theory and Computation},
	author = {Smith, Paul and Lorenz, Christian D.},
	month = sep,
	year = {2021},
	note = {Publisher: American Chemical Society},
	pages = {5907--5919},
}

@article{wilson_investigating_2021,
	title = {Investigating the lipid fingerprint of {SLC6} neurotransmitter transporters: a comparison of {dDAT}, {hDAT}, {hSERT}, and {GlyT2}},
	volume = {1},
	issn = {2667-1603},
	shorttitle = {Investigating the lipid fingerprint of {SLC6} neurotransmitter transporters},
	url = {https://www.sciencedirect.com/science/article/pii/S2667160321000090},
	doi = {10.1016/j.bbadva.2021.100010},
	abstract = {The local lipid annulus, or “fingerprint”, of four SLC6 transporters (dDAT, hDAT, hSERT, and GlyT2) embedded in a complex neuronal membrane were compared and characterised using molecular dynamics. Our analysis included the development of new tools to improve membrane leaflet detection and the analysis of leaflet-dependent properties. Overall, the lipid fingerprints of the four transporters are comprised of similar lipids when grouped by headgroup or tail saturation. The enrichment and depletion of specific lipids, including sites of cholesterol contacts, varies between transporters. The subtle differences in lipid fingerprints results in varying membrane biophysical properties near the transporter. Our results highlight that the lipid-fingerprint of SLC6 transporters in complex membranes is highly dependent on membrane composition. Our results further characterize how the presence and identity of membrane proteins affects the complex interplay of lipid-protein interactions, influencing the local lipid environment and membrane biophysical properties.},
	language = {en},
	urldate = {2022-08-03},
	journal = {BBA Advances},
	author = {Wilson, Katie A. and Wang, Lily and Lin, Yie Chang and O'Mara, Megan L.},
	month = jan,
	year = {2021},
	keywords = {SLC6 transport proteins, lLipid-protein interactions, mMembrane analysis, mMembrane transporters, mMolecular dynamics, nNeuronal membrane},
	pages = {100010},
}

@article{bouysset_prolif_2021,
	title = {{ProLIF}: a library to encode molecular interactions as fingerprints},
	volume = {13},
	issn = {1758-2946},
	shorttitle = {{ProLIF}},
	url = {https://doi.org/10.1186/s13321-021-00548-6},
	doi = {10.1186/s13321-021-00548-6},
	abstract = {Interaction fingerprints are vector representations that summarize the three-dimensional nature of interactions in molecular complexes, typically formed between a protein and a ligand. This kind of encoding has found many applications in drug-discovery projects, from structure-based virtual-screening to machine-learning. Here, we present ProLIF, a Python library designed to generate interaction fingerprints for molecular complexes extracted from molecular dynamics trajectories, experimental structures, and docking simulations. It can handle complexes formed of any combination of ligand, protein, DNA, or RNA molecules. The available interaction types can be fully reparametrized or extended by user-defined ones. Several tutorials that cover typical use-case scenarios are available, and the documentation is accompanied with code snippets showcasing the integration with other data-analysis libraries for a more seamless user-experience. The library can be freely installed from our GitHub repository (https://github.com/chemosim-lab/ProLIF).},
	number = {1},
	urldate = {2022-08-03},
	journal = {Journal of Cheminformatics},
	author = {Bouysset, Cédric and Fiorucci, Sébastien},
	month = sep,
	year = {2021},
	keywords = {Docking, Interaction fingerprint, Molecular dynamics, Python, Structural biology, Virtual screening},
	pages = {72},
}

@article{kokh_workflow_2020,
	title = {A workflow for exploring ligand dissociation from a macromolecule: {Efficient} random acceleration molecular dynamics simulation and interaction fingerprint analysis of ligand trajectories},
	volume = {153},
	issn = {0021-9606},
	shorttitle = {A workflow for exploring ligand dissociation from a macromolecule},
	url = {https://aip.scitation.org/doi/10.1063/5.0019088},
	doi = {10.1063/5.0019088},
	abstract = {The dissociation of ligands from proteins and other biomacromolecules occurs over a wide range of timescales. For most pharmaceutically relevant inhibitors, these timescales are far beyond those that are accessible by conventional molecular dynamics (MD) simulation. Consequently, to explore ligand egress mechanisms and compute dissociation rates, it is necessary to enhance the sampling of ligand unbinding. Random Acceleration MD (RAMD) is a simple method to enhance ligand egress from a macromolecular binding site, which enables the exploration of ligand egress routes without prior knowledge of the reaction coordinates. Furthermore, the τRAMD procedure can be used to compute the relative residence times of ligands. When combined with a machine-learning analysis of protein–ligand interaction fingerprints (IFPs), molecular features that affect ligand unbinding kinetics can be identified. Here, we describe the implementation of RAMD in GROMACS 2020, which provides significantly improved computational performance, with scaling to large molecular systems. For the automated analysis of RAMD results, we developed MD-IFP, a set of tools for the generation of IFPs along unbinding trajectories and for their use in the exploration of ligand dynamics. We demonstrate that the analysis of ligand dissociation trajectories by mapping them onto the IFP space enables the characterization of ligand dissociation routes and metastable states. The combined implementation of RAMD and MD-IFP provides a computationally efficient and freely available workflow that can be applied to hundreds of compounds in a reasonable computational time and will facilitate the use of τRAMD in drug design.},
	number = {12},
	urldate = {2022-08-03},
	journal = {The Journal of Chemical Physics},
	author = {Kokh, Daria B. and Doser, Bernd and Richter, Stefan and Ormersbach, Fabian and Cheng, Xingyi and Wade, Rebecca C.},
	month = sep,
	year = {2020},
	note = {Publisher: American Institute of Physics},
	pages = {125102},
}

@misc{alibay_ialibaymdrestraintsgenerator_2021,
	title = {{IAlibay}/{MDRestraintsGenerator}: {MDRestraintsGenerator} 0.1.0},
	shorttitle = {{IAlibay}/{MDRestraintsGenerator}},
	url = {https://zenodo.org/record/4570556},
	abstract = {First initial release of the MDRestraintsGenerator code. This release will be the first zenodo entry for this repository. Note: this code is not feature complete and non-API stable.},
	urldate = {2022-08-03},
	publisher = {Zenodo},
	author = {Alibay, Irfan},
	month = mar,
	year = {2021},
	doi = {10.5281/zenodo.4570556},
}

@article{walters_code_2020,
	title = {Code {Sharing} in the {Open} {Science} {Era}},
	volume = {60},
	issn = {1549-9596},
	url = {https://doi.org/10.1021/acs.jcim.0c01000},
	doi = {10.1021/acs.jcim.0c01000},
	abstract = {Many high-profile scientific journals have established policies mandating the release of code accompanying papers that describe computational methods. Unfortunately, the majority of journals that publish papers in Computational Chemistry and Cheminformatics have yet to define such guidelines. This Viewpoint reviews the current state of reproducibility for the field and makes a case for the inclusion of code with computational papers.},
	number = {10},
	urldate = {2022-08-03},
	journal = {Journal of Chemical Information and Modeling},
	author = {Walters, W. Patrick},
	month = oct,
	year = {2020},
	note = {Publisher: American Chemical Society},
	pages = {4417--4420},
}

@article{wilkinson_fair_2016,
	title = {The {FAIR} {Guiding} {Principles} for scientific data management and stewardship},
	volume = {3},
	copyright = {2016 The Author(s)},
	issn = {2052-4463},
	url = {https://www.nature.com/articles/sdata201618},
	doi = {10.1038/sdata.2016.18},
	abstract = {There is an urgent need to improve the infrastructure supporting the reuse of scholarly data. A diverse set of stakeholders—representing academia, industry, funding agencies, and scholarly publishers—have come together to design and jointly endorse a concise and measureable set of principles that we refer to as the FAIR Data Principles. The intent is that these may act as a guideline for those wishing to enhance the reusability of their data holdings. Distinct from peer initiatives that focus on the human scholar, the FAIR Principles put specific emphasis on enhancing the ability of machines to automatically find and use the data, in addition to supporting its reuse by individuals. This Comment is the first formal publication of the FAIR Principles, and includes the rationale behind them, and some exemplar implementations in the community.},
	language = {en},
	number = {1},
	urldate = {2022-08-03},
	journal = {Scientific Data},
	author = {Wilkinson, Mark D. and Dumontier, Michel and Aalbersberg, IJsbrand Jan and Appleton, Gabrielle and Axton, Myles and Baak, Arie and Blomberg, Niklas and Boiten, Jan-Willem and da Silva Santos, Luiz Bonino and Bourne, Philip E. and Bouwman, Jildau and Brookes, Anthony J. and Clark, Tim and Crosas, Mercè and Dillo, Ingrid and Dumon, Olivier and Edmunds, Scott and Evelo, Chris T. and Finkers, Richard and Gonzalez-Beltran, Alejandra and Gray, Alasdair J. G. and Groth, Paul and Goble, Carole and Grethe, Jeffrey S. and Heringa, Jaap and ’t Hoen, Peter A. C. and Hooft, Rob and Kuhn, Tobias and Kok, Ruben and Kok, Joost and Lusher, Scott J. and Martone, Maryann E. and Mons, Albert and Packer, Abel L. and Persson, Bengt and Rocca-Serra, Philippe and Roos, Marco and van Schaik, Rene and Sansone, Susanna-Assunta and Schultes, Erik and Sengstag, Thierry and Slater, Ted and Strawn, George and Swertz, Morris A. and Thompson, Mark and van der Lei, Johan and van Mulligen, Erik and Velterop, Jan and Waagmeester, Andra and Wittenburg, Peter and Wolstencroft, Katherine and Zhao, Jun and Mons, Barend},
	month = mar,
	year = {2016},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Publication characteristics, Research data},
	pages = {160018},
}

@article{chue_hong_fair_2021,
	title = {{FAIR} {Principles} for {Research} {Software} ({FAIR4RS} {Principles})},
	copyright = {Creative Commons Attribution 4.0 International},
	url = {https://zenodo.org/record/6623556#.YqCJTJNBwlw},
	doi = {10.15497/RDA00068},
	abstract = {Research software is a fundamental and vital part of research worldwide, yet there remain significant challenges to software productivity, quality, reproducibility, and sustainability. Improving the practice of scholarship is a common goal of the open science, open source software and FAIR (Findable, Accessible, Interoperable and Reusable) communities, but improving the sharing of research software has not yet been a strong focus of the latter. To improve the FAIRness of research software, the FAIR for Research Software (FAIR4RS) Working Group has sought to understand how to apply the FAIR Guiding Principles for scientific data management and stewardship to research software, bringing together existing and new community efforts. Many of the FAIR Guiding Principles can be directly applied to research software by treating software and data as similar digital research objects. However, specific characteristics of software — such as its executability, composite nature, and continuous evolution and versioning — make it necessary to revise and extend the principles. This document presents the first version of the FAIR Principles for Research Software (FAIR4RS Principles). It is an outcome of the FAIR for Research Software Working Group (FAIR4RS WG). The FAIR for Research Software Working Group is jointly convened as an RDA Working Group, FORCE11 Working Group, and Research Software Alliance (ReSA) Task Force.},
	language = {en},
	urldate = {2022-08-03},
	author = {Chue Hong, Neil P. and Katz, Daniel S. and Barker, Michelle and Lamprecht, Anna-Lena and Martinez, Carlos and Psomopoulos, Fotis E. and Harrow, Jen and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},
	collaborator = {Struck, Alexander and Lee, Allen and Loewe, Axel and Van Werkhoven, Ben and Jones, Catherine and Garijo, Daniel and Plomp, Esther and Genova, Francoise and Shanahan, Hugh and Leng, Joanna and Hellstrm, Maggie and Sandström, Malin and Sinha, Manodeep and Kuzak, Mateusz and Herterich, Patricia and Zhang, Qian and Islam, Sharif and Sansone, Susanna-Assunta and Pollard, Tom and Atmojo, Udayanto Dwi and Williams, Alan and Czerniak, Andreas and Nihues, Anna and Fouilloux, Anne Claire and Desinghu, Bala and Goble, Carole and Richard, Céline and Gray, Charles and Erdmann, Chris and Nüst, Daniel and Tartarini, Daniele and Ranguelova, Elena and Anzt, Hartwig and Todorov, Ilian and McNally, James and Moldon, Javier and Burnett, Jessica and Garrido-Sánchez, Julián and Belhajjame, Khalid and Sesink, Laurents and Hwang, Lorraine and Tovani-Palone, Marcos Roberto and Wilkinson, Mark D. and Servillat, Mathieu and Liffers, Matthias and Fox, Merc and Miljković, Nadica and Lynch, Nick and Lavanchy, Paula Martinez and Gesing, Sandra and Stevens, Sarah and Cuesta, Sergio Martinez and Peroni, Silvio and Soiland-Reyes, Stian and Bakker, Tom and Rabemanantsoa, Tovo and Sochat, Vanessa and Yehudi, Yo and Research Data Alliance FAIR For Research Software (FAIR4RS) WG},
	year = {2021},
	note = {Publisher: Research Data Alliance},
}

@inproceedings{fan_pmda_2019,
	address = {Austin, TX},
	title = {{PMDA} - {Parallel} {Molecular} {Dynamics} {Analysis}},
	url = {https://conference.scipy.org/proceedings/scipy2019/shujie_fan.html},
	doi = {10.25080/Majora-7ddc1dd1-013},
	abstract = {MDAnalysis is an object-oriented Python library to analyze trajectories from molecular dynamics (MD) simulations in many popular formats. With the development of highly optimized MD software packages on high performance computing (HPC) resources, the size of simulation trajectories is growing up to many terabytes in size. However efficient usage of multicore architecture is a challenge for MDAnalysis, which does not yet provide a standard interface for parallel analysis. To address the challenge, we developed PMDA, a Python library that builds upon MDAnalysis to provide parallel analysis algorithms. PMDA parallelizes common analysis algorithms in MDAnalysis through a task-based approach with the Dask library. We implement a simple split-apply-combine scheme for parallel trajectory analysis. The trajectory is split into blocks, analysis is performed separately and in parallel on each block ({\textbackslash}textquotedbl\{\}apply{\textbackslash}textquotedbl\{\}), then results from each block are gathered and combined. PMDA allows one to perform parallel trajectory analysis with pre-defined analysis tasks. In addition, it provides a common interface that makes it easy to create user-defined parallel analysis modules. PMDA supports all schedulers in Dask, and one can run analysis in a distributed fashion on HPC machines, ad-hoc clusters, a single multi-core workstation or a laptop. We tested the performance of PMDA on single node and multiple nodes on a national supercomputer. The results show that parallelization improves the performance of trajectory analysis and, depending on the analysis task, can cut down time to solution from hours to minutes. Although still in alpha stage, it is already used on resources ranging from multi-core laptops to XSEDE supercomputers to speed up analysis of molecular dynamics trajectories. PMDA is available as open source under the GNU General Public License, version 2 and can be easily installed via the pip and conda package managers.},
	booktitle = {Proceedings of the 18th {Python} in {Science} {Conference}},
	author = {Fan, Shujie and Linke, Max and Paraskevakos, Ioannis and Gowers, Richard J. and Gecht, Michael and Beckstein, Oliver},
	editor = {Calloway, Chris and Lippa, David and Niederhut, Dillon and Shupe, David},
	year = {2019},
	pages = {134 -- 142},
}

@inproceedings{khoshlessan_parallel_2017,
	address = {Austin, TX},
	title = {Parallel {Analysis} in {MDAnalysis} using the {Dask} {Parallel} {Computing} {Library}},
	url = {http://conference.scipy.org/proceedings/scipy2017/mahzad_khoslessan.html},
	doi = {10.25080/shinma-7f4c6e7-00a},
	urldate = {2017-07-17},
	booktitle = {Proceedings of the 16th {Python} in {Science} {Conference}},
	author = {Khoshlessan, Mahzad and Paraskevakos, Ioannis and Jha, Shantenu and Beckstein, Oliver},
	editor = {Huff, Katy and Lippa, David and Niederhut, Dillon and Pacer, M},
	year = {2017},
	pages = {64--72},
}

@inproceedings{jakupovic_mpi-parallel_2021,
	address = {Austin, TX},
	title = {{MPI}-parallel {Molecular} {Dynamics} {Trajectory} {Analysis} with the {H5MD} {Format} in the {MDAnalysis} {Python} {Package}},
	url = {https://conference.scipy.org/proceedings/scipy2021/edis_jakupovic.html},
	doi = {10.25080/majora-1b6fd038-005},
	abstract = {Molecular dynamics (MD) computer simulations help elucidate details of the molecular processes in complex biological systems, from protein dynamics to drug discovery. One major issue is that these MD simulation files are now commonly terabytes in size, which means analyzing the data from these files becomes a painstakingly expensive task. In the age of national supercomputers, methods of parallel analysis are becoming a necessity for the efficient use of time and high performance computing (HPC) resources but for any approach to parallel analysis, simply reading the file from disk becomes the performance bottleneck that limits overall analysis speed. One promising way around this file I/O hurdle is to use a parallel message passing interface (MPI) implementation with the HDF5 (Hierarchical Data Format 5) file format to access a single file simultaneously with numerous processes on a parallel file system. Our previous feasibility study suggested that this combination can lead to favorable parallel scaling with hundreds of CPU cores, so we implemented a fast and user-friendly HDF5 reader (the H5MDReader class) that adheres to H5MD (HDF5 for Molecular Dynamics) specifications. We made H5MDReader (together with a H5MD output class H5MDWriter) available in the MDAnalysis library, a Python package that simplifies the process of reading and writing various popular MD file formats by providing a streamlined user-interface that is independent of any specific file format. We benchmarked H5MDReader's parallel file reading capabilities on three HPC clusters: ASU Agave, SDSC Comet, and PSC Bridges. The benchmark consisted of a simple split-apply-combine scheme of an I/O bound task that split a 90k frame (113 GiB) coordinate trajectory into chunks for processes, where each process performed the commonly used RMSD (root mean square distance after optimal structural superposition) calculation on their chunk of data, and then gathered the results back to the root process. For baseline performance, we found maximum I/O speedups at 2 full nodes, with Agave showing 20x, and a maximum computation speedup on Comet of 373x on 384 cores (all three HPCs scaled well in their computation task). We went on to test a series of optimizations attempting to speed up I/O performance, including adjusting file system stripe count, implementing a masked array feature that only loads relevant data for the computation task, front loading all I/O by loading the entire trajectory into memory, and manually adjusting the HDF5 dataset chunk shapes. We found the largest improvement in I/O performance by optimizing the chunk shape of the HDF5 datasets to match the iterative access pattern of our analysis benchmark. With respect to baseline serial performance, our best result was a 98x speedup at 112 cores on ASU Agave. In terms of absolute time saved, the analysis went from 4623 seconds in the baseline serial run to 47 seconds in the parallel, properly chunked run. Our results emphasize the fact that file I/O is not just dependent on the access pattern of the file, but more so the synergy between access pattern and the layout of the file on disk.},
	urldate = {2021-07-05},
	booktitle = {Proceedings of the 20th {Python} in {Science} {Conference}},
	author = {Jakupovic, Edis and Beckstein, Oliver},
	editor = {Agarwal, Meghann and Calloway, Chris and Niederhut, Dillon and Shupe, David},
	year = {2021},
	pages = {40--48},
}

@article{michaud-agrawal_mdanalysis_2011,
	title = {{MDAnalysis}: {A} {Toolkit} for the {Analysis} of {Molecular} {Dynamics} {Simulations}},
	volume = {32},
	url = {http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3144279/},
	doi = {10.1002/jcc.21787},
	abstract = {MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, and NAMD and the Protein Data Bank format can be read and written. Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU Public License from http://mdanalysis.googlecode.com.},
	journal = {J Comp Chem},
	author = {Michaud-Agrawal, Naveen and Denning, Elizabeth Jane and Woolf, Thomas B. and Beckstein, Oliver},
	year = {2011},
	keywords = {MDAnalysis, Python, molecular dynamics (MD) simulation},
	pages = {2319--2327},
}

@inproceedings{gowers_mdanalysis_2016,
	address = {Austin, TX},
	title = {{MDAnalysis}: {A} {Python} package for the rapid analysis of molecular dynamics simulations.},
	url = {http://conference.scipy.org/proceedings/scipy2016/oliver_beckstein.html},
	doi = {10.25080/Majora-629e541a-00e},
	abstract = {MDAnalysis (http://mdanalysis.org) is a library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. MD simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on HPC resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. MDAnalysis addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted work flows, as foundations for other packages, and for interactive and rapid prototyping work in IPython / Jupyter notebooks, especially together with molecular visualization provided by nglview and time series analysis with pandas. MDAnalysis is written in Python and Cython and uses NumPy arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. MDAnalysis is available under the GNU General Public License v2.},
	booktitle = {Proceedings of the 15th {Python} in {Science} {Conference}},
	author = {Gowers, R. J and Linke, M. and Barnoud, J. and {T. J. E. Reddy} and Melo, M. N. and Seyler, S. L. and Dotson, D. L. and Domanski, J. and Buchoux, S. and Kenney, I. M. and Beckstein, O.},
	editor = {Benthall, Sebastian and Rostrup, Scott},
	year = {2016},
	pages = {102--109},
}

@techreport{hicks_its_nodate,
	type = {White {Paper}},
	title = {“{It}’s {Like} {Coding} in the {Dark}”:},
	language = {en},
	institution = {Catharsis Consulting},
	author = {Hicks, Catherine},
	pages = {25},
}

@article{gardner_sustained_2022,
	title = {Sustained software development, not number of citations or journal choice, is indicative of accurate bioinformatic software},
	volume = {23},
	issn = {1474-760X},
	url = {https://doi.org/10.1186/s13059-022-02625-x},
	doi = {10.1186/s13059-022-02625-x},
	abstract = {Computational biology provides software tools for testing and making inferences about biological data. In the face of increasing volumes of data, heuristic methods that trade software speed for accuracy may be employed. We have studied these trade-offs using the results of a large number of independent software benchmarks, and evaluated whether external factors, including speed, author reputation, journal impact, recency and developer efforts, are indicative of accurate software.},
	number = {1},
	urldate = {2022-02-23},
	journal = {Genome Biology},
	author = {Gardner, Paul P. and Paterson, James M. and McGimpsey, Stephanie and Ashari-Ghomi, Fatemeh and Umu, Sinan U. and Pawlik, Aleksandra and Gavryushkin, Alex and Black, Michael A.},
	month = feb,
	year = {2022},
	pages = {56},
}

@techreport{grossfield_how_2021,
	title = {How to be a good member of a scientific software community [{Article} v0.1]},
	url = {https://osf.io/kgr45/},
	abstract = {Software is ubiquitous in modern science — almost any project, in almost any discipline, requires some code to work. However, many (or even most) scientists are not program- mers, and must rely on programs written and maintained by others. A crucial but often neglected part of a scientist’s training is learning how to use new tools, and how to exist as part of a community of users. This article will discuss key behaviors that can make the experience quicker, more efficient, and more pleasant for the user and developer alike.},
	urldate = {2021-09-02},
	institution = {OSF Preprints},
	author = {Grossfield, Alan},
	month = aug,
	year = {2021},
	doi = {10.31219/osf.io/kgr45},
	note = {type: article},
	keywords = {Biochemistry, Biophysics, Education, Life Sciences, Physical Sciences and Mathematics, and Structural Biology},
}

@article{michael_r_walking_2013,
	title = {Walking the talk: adopting and adapting sustainable scientiﬁc software development processes in a small biology lab},
	shorttitle = {Walking the talk},
	url = {https://figshare.com/articles/GED_submission_to_First_Workshop_on_Sustainable_Software_for_Science_Practice_and_Experiences/791567},
	doi = {10.6084/m9.figshare.791567},
	abstract = {Walking the talk: adopting and adapting sustainable scientiﬁc software development processes in a small biology lab},
	urldate = {2016-01-13},
	author = {Michael R., Crusoe and C. Titus, Brown},
	month = sep,
	year = {2013},
}

@article{de_buyl_h5md_2014,
	title = {{H5MD}: {A} structured, efficient, and portable file format for molecular data},
	volume = {185},
	issn = {0010-4655},
	shorttitle = {{H5MD}},
	url = {http://www.sciencedirect.com/science/article/pii/S0010465514000447},
	doi = {10.1016/j.cpc.2014.01.018},
	abstract = {We propose a new file format named “H5MD” for storing molecular simulation data, such as trajectories of particle positions and velocities, along with thermodynamic observables that are monitored during the course of the simulation. H5MD files are HDF5 (Hierarchical Data Format) files with a specific hierarchy and naming scheme. Thus, H5MD inherits many benefits of HDF5, e.g., structured layout of multi-dimensional datasets, data compression, fast and parallel I/O, and portability across many programming languages and hardware platforms. H5MD files are self-contained, and foster the reproducibility of scientific data and the interchange of data between researchers using different simulation programs and analysis software. In addition, the H5MD specification can serve for other kinds of data (e.g. experimental data) and is extensible to supplemental data, or may be part of an enclosing file structure.},
	number = {6},
	urldate = {2016-01-13},
	journal = {Computer Physics Communications},
	author = {de Buyl, Pierre and Colberg, Peter H. and Höfling, Felix},
	month = jun,
	year = {2014},
	keywords = {HDF5, Molecular simulation},
	pages = {1546--1553},
}

@techreport{stodden_enabling_2009,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {Enabling {Reproducible} {Research}: {Open} {Licensing} for {Scientific} {Innovation}},
	shorttitle = {Enabling {Reproducible} {Research}},
	url = {https://papers.ssrn.com/abstract=1362040},
	abstract = {There is a gap in the current licensing and copyright structure for the growing number of scientists releasing their research publicly, particularly on the Internet. Scientific research produces more scholarship than the final paper: for example, the code, data structures, experimental design and parameters, documentation, and figures, are all important both for communication of the scholarship and replication of the results. US copyright law is a barrier to the sharing of scientific scholarship since it establishes exclusive rights for creators over their work, thereby limiting the ability of others to copy, use, build upon, or alter the research. This is precisely opposite to prevailing scientific norms, which provide both that results be replicated before accepted as knowledge, and that scientific understanding be built upon previous discoveries for which authorship recognition is given. In accordance with these norms and to encourage the release of all scientific scholarship, I propose the Reproducible Research Standard (RRS) both to ensure attribution and facilitate the sharing of scientific works. Using the RRS on all components of scientific scholarship will encourage reproducible scientific investigation, facilitate greater collaboration, and promote engagement of the larger community in scientific learning and discovery.},
	language = {en},
	number = {ID 1362040},
	urldate = {2021-09-23},
	institution = {Social Science Research Network},
	author = {Stodden, Victoria},
	month = mar,
	year = {2009},
	keywords = {Enabling Reproducible Research: Open Licensing for Scientific Innovation, SSRN, Victoria Stodden},
}
